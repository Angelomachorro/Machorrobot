

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Wed Jun 02 10:42:58 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	strings,global,class=STRING,delta=2,noexec
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    17                           	psect	maintext,global,class=CODE,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2
    22                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text9,local,class=CODE,merge=1,delta=2
    27                           	psect	text10,local,class=CODE,merge=1,delta=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text15,local,class=CODE,merge=1,delta=2
    33                           	psect	text16,local,class=CODE,merge=1,delta=2
    34                           	psect	text17,local,class=CODE,merge=1,delta=2
    35                           	psect	text18,local,class=CODE,merge=1,delta=2
    36                           	psect	text19,local,class=CODE,merge=1,delta=2
    37                           	psect	text20,local,class=CODE,merge=1,delta=2
    38                           	psect	intentry,global,class=CODE,delta=2
    39                           	psect	text21,local,class=CODE,merge=1,delta=2
    40                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    41                           	dabs	1,0x7E,2
    42  0000                     
    43                           ; Version 2.20
    44                           ; Generated 12/02/2020 GMT
    45                           ; 
    46                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC16F887 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77  0000                     	;# 
    78  0001                     	;# 
    79  0002                     	;# 
    80  0003                     	;# 
    81  0004                     	;# 
    82  0005                     	;# 
    83  0006                     	;# 
    84  0007                     	;# 
    85  0008                     	;# 
    86  0009                     	;# 
    87  000A                     	;# 
    88  000B                     	;# 
    89  000C                     	;# 
    90  000D                     	;# 
    91  000E                     	;# 
    92  000E                     	;# 
    93  000F                     	;# 
    94  0010                     	;# 
    95  0011                     	;# 
    96  0012                     	;# 
    97  0013                     	;# 
    98  0014                     	;# 
    99  0015                     	;# 
   100  0015                     	;# 
   101  0016                     	;# 
   102  0017                     	;# 
   103  0018                     	;# 
   104  0019                     	;# 
   105  001A                     	;# 
   106  001B                     	;# 
   107  001B                     	;# 
   108  001C                     	;# 
   109  001D                     	;# 
   110  001E                     	;# 
   111  001F                     	;# 
   112  0081                     	;# 
   113  0085                     	;# 
   114  0086                     	;# 
   115  0087                     	;# 
   116  0088                     	;# 
   117  0089                     	;# 
   118  008C                     	;# 
   119  008D                     	;# 
   120  008E                     	;# 
   121  008F                     	;# 
   122  0090                     	;# 
   123  0091                     	;# 
   124  0092                     	;# 
   125  0093                     	;# 
   126  0093                     	;# 
   127  0093                     	;# 
   128  0094                     	;# 
   129  0095                     	;# 
   130  0096                     	;# 
   131  0097                     	;# 
   132  0098                     	;# 
   133  0099                     	;# 
   134  009A                     	;# 
   135  009B                     	;# 
   136  009C                     	;# 
   137  009D                     	;# 
   138  009E                     	;# 
   139  009F                     	;# 
   140  0105                     	;# 
   141  0107                     	;# 
   142  0108                     	;# 
   143  0109                     	;# 
   144  010C                     	;# 
   145  010C                     	;# 
   146  010D                     	;# 
   147  010E                     	;# 
   148  010F                     	;# 
   149  0185                     	;# 
   150  0187                     	;# 
   151  0188                     	;# 
   152  0189                     	;# 
   153  018C                     	;# 
   154  018D                     	;# 
   155  0000                     	;# 
   156  0001                     	;# 
   157  0002                     	;# 
   158  0003                     	;# 
   159  0004                     	;# 
   160  0005                     	;# 
   161  0006                     	;# 
   162  0007                     	;# 
   163  0008                     	;# 
   164  0009                     	;# 
   165  000A                     	;# 
   166  000B                     	;# 
   167  000C                     	;# 
   168  000D                     	;# 
   169  000E                     	;# 
   170  000E                     	;# 
   171  000F                     	;# 
   172  0010                     	;# 
   173  0011                     	;# 
   174  0012                     	;# 
   175  0013                     	;# 
   176  0014                     	;# 
   177  0015                     	;# 
   178  0015                     	;# 
   179  0016                     	;# 
   180  0017                     	;# 
   181  0018                     	;# 
   182  0019                     	;# 
   183  001A                     	;# 
   184  001B                     	;# 
   185  001B                     	;# 
   186  001C                     	;# 
   187  001D                     	;# 
   188  001E                     	;# 
   189  001F                     	;# 
   190  0081                     	;# 
   191  0085                     	;# 
   192  0086                     	;# 
   193  0087                     	;# 
   194  0088                     	;# 
   195  0089                     	;# 
   196  008C                     	;# 
   197  008D                     	;# 
   198  008E                     	;# 
   199  008F                     	;# 
   200  0090                     	;# 
   201  0091                     	;# 
   202  0092                     	;# 
   203  0093                     	;# 
   204  0093                     	;# 
   205  0093                     	;# 
   206  0094                     	;# 
   207  0095                     	;# 
   208  0096                     	;# 
   209  0097                     	;# 
   210  0098                     	;# 
   211  0099                     	;# 
   212  009A                     	;# 
   213  009B                     	;# 
   214  009C                     	;# 
   215  009D                     	;# 
   216  009E                     	;# 
   217  009F                     	;# 
   218  0105                     	;# 
   219  0107                     	;# 
   220  0108                     	;# 
   221  0109                     	;# 
   222  010C                     	;# 
   223  010C                     	;# 
   224  010D                     	;# 
   225  010E                     	;# 
   226  010F                     	;# 
   227  0185                     	;# 
   228  0187                     	;# 
   229  0188                     	;# 
   230  0189                     	;# 
   231  018C                     	;# 
   232  018D                     	;# 
   233                           
   234                           	psect	idataCOMMON
   235  0F38                     __pidataCOMMON:
   236                           
   237                           ;initializer for _angulos
   238  0F38  3440               	retlw	64
   239  0F39  3440               	retlw	64
   240  0F3A  3440               	retlw	64
   241  0F3B  3440               	retlw	64
   242                           
   243                           	psect	idataBANK0
   244  0003                     __pidataBANK0:
   245                           
   246                           ;initializer for _leerSensor
   247  0003  3401               	retlw	1
   248                           
   249                           	psect	nvBANK0
   250  004E                     __pnvBANK0:
   251  004E                     _portAanterior:
   252  004E                     	ds	1
   253  004F                     _portAactual:
   254  004F                     	ds	1
   255  000E                     _TMR1	set	14
   256  0019                     _TXREG	set	25
   257  0018                     _RCSTAbits	set	24
   258  001B                     _CCPR2L	set	27
   259  0015                     _CCPR1L	set	21
   260  0005                     _PORTAbits	set	5
   261  0005                     _PORTA	set	5
   262  0010                     _T1CONbits	set	16
   263  0017                     _CCP1CONbits	set	23
   264  001D                     _CCP2CONbits	set	29
   265  0012                     _T2CONbits	set	18
   266  0006                     _PORTBbits	set	6
   267  001F                     _ADCON0bits	set	31
   268  001E                     _ADRESH	set	30
   269  001A                     _RCREG	set	26
   270  000C                     _PIR1bits	set	12
   271  0008                     _PORTDbits	set	8
   272  0001                     _TMR0	set	1
   273  0007                     _PORTCbits	set	7
   274  000B                     _INTCONbits	set	11
   275  005A                     _T0IF	set	90
   276  008C                     _PIE1bits	set	140
   277  0099                     _SPBRG	set	153
   278  0098                     _TXSTAbits	set	152
   279  009F                     _ADCON1	set	159
   280  0081                     _OPTION_REGbits	set	129
   281  0092                     _PR2	set	146
   282  0086                     _TRISBbits	set	134
   283  0086                     _TRISB	set	134
   284  0088                     _TRISD	set	136
   285  0087                     _TRISC	set	135
   286  0085                     _TRISAbits	set	133
   287  0085                     _TRISA	set	133
   288  010C                     _EEDATA	set	268
   289  010F                     _EEADRH	set	271
   290  010D                     _EEADR	set	269
   291  018D                     _EECON2	set	397
   292  018C                     _EECON1bits	set	396
   293  0189                     _ANSELH	set	393
   294  0188                     _ANSEL	set	392
   295                           
   296                           	psect	strings
   297  0717                     __pstrings:
   298  0717                     stringtab:
   299  0717                     __stringtab:
   300                           
   301                           ;	String table - string pointers are 1 byte each
   302  0717  1BFF               	btfsc	btemp+1,7
   303  0718  2F21               	ljmp	stringcode
   304  0719  1383               	bcf	3,7
   305  071A  187F               	btfsc	btemp+1,0
   306  071B  1783               	bsf	3,7
   307  071C  0800               	movf	0,w
   308  071D  0A84               	incf	4,f
   309  071E  1903               	skipnz
   310  071F  0AFF               	incf	btemp+1,f
   311  0720  0008               	return
   312  0721                     stringcode:
   313  0721                     stringdir:
   314  0721  3007               	movlw	high stringdir
   315  0722  008A               	movwf	10
   316  0723  0804               	movf	4,w
   317  0724  0A84               	incf	4,f
   318  0725  0782               	addwf	2,f
   319  0726                     __stringbase:
   320  0726  3400               	retlw	0
   321  0727                     __end_of__stringtab:
   322  0727                     STR_5:
   323  0727  3443               	retlw	67	;'C'
   324  0728  346F               	retlw	111	;'o'
   325  0729  346C               	retlw	108	;'l'
   326  072A  346F               	retlw	111	;'o'
   327  072B  3463               	retlw	99	;'c'
   328  072C  3461               	retlw	97	;'a'
   329  072D  346E               	retlw	110	;'n'
   330  072E  3464               	retlw	100	;'d'
   331  072F  346F               	retlw	111	;'o'
   332  0730  3420               	retlw	32	;' '
   333  0731  3450               	retlw	80	;'P'
   334  0732  346F               	retlw	111	;'o'
   335  0733  3473               	retlw	115	;'s'
   336  0734  3469               	retlw	105	;'i'
   337  0735  3463               	retlw	99	;'c'
   338  0736  3469               	retlw	105	;'i'
   339  0737  346F               	retlw	111	;'o'
   340  0738  346E               	retlw	110	;'n'
   341  0739  3465               	retlw	101	;'e'
   342  073A  3473               	retlw	115	;'s'
   343  073B  343A               	retlw	58	;':'
   344  073C  340A               	retlw	10
   345  073D  3400               	retlw	0
   346  073E                     STR_1:
   347  073E  3447               	retlw	71	;'G'
   348  073F  3475               	retlw	117	;'u'
   349  0740  3461               	retlw	97	;'a'
   350  0741  3472               	retlw	114	;'r'
   351  0742  3464               	retlw	100	;'d'
   352  0743  3461               	retlw	97	;'a'
   353  0744  346E               	retlw	110	;'n'
   354  0745  3464               	retlw	100	;'d'
   355  0746  346F               	retlw	111	;'o'
   356  0747  3420               	retlw	32	;' '
   357  0748  3450               	retlw	80	;'P'
   358  0749  346F               	retlw	111	;'o'
   359  074A  3473               	retlw	115	;'s'
   360  074B  3469               	retlw	105	;'i'
   361  074C  3463               	retlw	99	;'c'
   362  074D  3469               	retlw	105	;'i'
   363  074E  346F               	retlw	111	;'o'
   364  074F  346E               	retlw	110	;'n'
   365  0750  3465               	retlw	101	;'e'
   366  0751  3473               	retlw	115	;'s'
   367  0752  343A               	retlw	58	;':'
   368  0753  340A               	retlw	10
   369  0754  3400               	retlw	0
   370  0755                     STR_3:
   371  0755  3435               	retlw	53	;'5'
   372  0756  3429               	retlw	41	;')'
   373  0757  3420               	retlw	32	;' '
   374  0758  3400               	retlw	0
   375  0759                     STR_4:
   376  0759  3436               	retlw	54	;'6'
   377  075A  3429               	retlw	41	;')'
   378  075B  3420               	retlw	32	;' '
   379  075C  3400               	retlw	0
   380  0756                     
   381                           	psect	cinit
   382  0011                     start_initialization:	
   383                           ; #config settings
   384                           
   385  0011                     __initialization:
   386                           
   387                           ; Initialize objects allocated to BANK0
   388  0011  120A  118A  2003  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   389  0016  00D0               	movwf	__pdataBANK0& (0+127)
   390                           
   391                           ; Initialize objects allocated to COMMON
   392  0017  120A  158A  2738  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   393  001C  00F8               	movwf	__pdataCOMMON& (0+127)
   394  001D  120A  158A  2739  120A  118A  	fcall	__pidataCOMMON+1	;fetch initializer
   395  0022  00F9               	movwf	(__pdataCOMMON+1)& (0+127)
   396  0023  120A  158A  273A  120A  118A  	fcall	__pidataCOMMON+2	;fetch initializer
   397  0028  00FA               	movwf	(__pdataCOMMON+2)& (0+127)
   398  0029  120A  158A  273B  120A  118A  	fcall	__pidataCOMMON+3	;fetch initializer
   399  002E  00FB               	movwf	(__pdataCOMMON+3)& (0+127)
   400                           
   401                           ; Clear objects allocated to BANK1
   402  002F  1383               	bcf	3,7	;select IRP bank0
   403  0030  30A0               	movlw	low __pbssBANK1
   404  0031  0084               	movwf	4
   405  0032  30D2               	movlw	low (__pbssBANK1+50)
   406  0033  120A  158A  2742  120A  118A  	fcall	clear_ram0
   407                           
   408                           ; Clear objects allocated to BANK0
   409  0038  303C               	movlw	low __pbssBANK0
   410  0039  0084               	movwf	4
   411  003A  304E               	movlw	low (__pbssBANK0+18)
   412  003B  120A  158A  2742  120A  118A  	fcall	clear_ram0
   413                           
   414                           ; Clear objects allocated to COMMON
   415  0040  01FC               	clrf	__pbssCOMMON& (0+127)
   416  0041  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
   417  0042                     end_of_initialization:	
   418                           ;End of C runtime variable initialization code
   419                           
   420  0042                     __end_of__initialization:
   421  0042  0183               	clrf	3
   422  0043  120A  118A  2B69   	ljmp	_main	;jump to C main() function
   423                           
   424                           	psect	bssCOMMON
   425  007C                     __pbssCOMMON:
   426  007C                     _contadorDatos:
   427  007C                     	ds	1
   428  007D                     _contador:
   429  007D                     	ds	1
   430                           
   431                           	psect	dataCOMMON
   432  0078                     __pdataCOMMON:
   433  0078                     _angulos:
   434  0078                     	ds	4
   435                           
   436                           	psect	bssBANK0
   437  003C                     __pbssBANK0:
   438  003C                     _tiempo:
   439  003C                     	ds	2
   440  003E                     _ejecutaComando:
   441  003E                     	ds	1
   442  003F                     _hayComando:
   443  003F                     	ds	1
   444  0040                     _comando:
   445  0040                     	ds	1
   446  0041                     _adc2:
   447  0041                     	ds	1
   448  0042                     _adc1:
   449  0042                     	ds	1
   450  0043                     _cont:
   451  0043                     	ds	1
   452  0044                     _debug:
   453  0044                     	ds	6
   454  004A                     _numero:
   455  004A                     	ds	4
   456                           
   457                           	psect	dataBANK0
   458  0050                     __pdataBANK0:
   459  0050                     _leerSensor:
   460  0050                     	ds	1
   461                           
   462                           	psect	bssBANK1
   463  00A0                     __pbssBANK1:
   464  00A0                     _lecturaUart:
   465  00A0                     	ds	50
   466                           
   467                           	psect	clrtext
   468  0F42                     clear_ram0:	
   469                           ;	Called with FSR containing the base address, and
   470                           ;	W with the last address+1
   471                           
   472  0F42  0064               	clrwdt	;clear the watchdog before getting into this loop
   473  0F43                     clrloop0:
   474  0F43  0180               	clrf	0	;clear RAM location pointed to by FSR
   475  0F44  0A84               	incf	4,f	;increment pointer
   476  0F45  0604               	xorwf	4,w	;XOR with final address
   477  0F46  1903               	btfsc	3,2	;have we reached the end yet?
   478  0F47  3400               	retlw	0	;all done for this memory range, return
   479  0F48  0604               	xorwf	4,w	;XOR again to restore value
   480  0F49  2F43               	goto	clrloop0	;do the next byte
   481                           
   482                           	psect	cstackCOMMON
   483  0070                     __pcstackCOMMON:
   484  0070                     ?_isdigit:
   485  0070                     ?_cicloDeTrabajo:	
   486                           ; 1 bit 
   487                           
   488  0070                     ?_initUart:	
   489                           ; 1 bytes @ 0x0
   490                           
   491  0070                     ?_savePosition:	
   492                           ; 1 bytes @ 0x0
   493                           
   494  0070                     ?_readPosition:	
   495                           ; 1 bytes @ 0x0
   496                           
   497  0070                     ?_aletear:	
   498                           ; 1 bytes @ 0x0
   499                           
   500  0070                     ?_moonwalk:	
   501                           ; 1 bytes @ 0x0
   502                           
   503  0070                     ?_ejecutarComando:	
   504                           ; 1 bytes @ 0x0
   505                           
   506  0070                     ?_ISR:	
   507                           ; 1 bytes @ 0x0
   508                           
   509  0070                     ?_main:	
   510                           ; 1 bytes @ 0x0
   511                           
   512  0070                     ?_SendChar:	
   513                           ; 1 bytes @ 0x0
   514                           
   515  0070                     ?_readEEPROM:	
   516                           ; 1 bytes @ 0x0
   517                           
   518  0070                     ?i1_cicloDeTrabajo:	
   519                           ; 1 bytes @ 0x0
   520                           
   521  0070                     ??i1_cicloDeTrabajo:	
   522                           ; 1 bytes @ 0x0
   523                           
   524  0070                     i1cicloDeTrabajo@valor:	
   525                           ; 1 bytes @ 0x0
   526                           
   527                           
   528                           ; 1 bytes @ 0x0
   529  0070                     	ds	1
   530  0071                     ??_ISR:
   531                           
   532                           ; 1 bytes @ 0x1
   533  0071                     	ds	6
   534  0077                     ISR@aux:
   535                           
   536                           ; 1 bytes @ 0x7
   537  0077                     	ds	1
   538                           
   539                           	psect	cstackBANK0
   540  0020                     __pcstackBANK0:
   541  0020                     ??_cicloDeTrabajo:
   542  0020                     ??_initUart:	
   543                           ; 1 bytes @ 0x0
   544                           
   545  0020                     ??_isdigit:	
   546                           ; 1 bytes @ 0x0
   547                           
   548  0020                     ??_SendChar:	
   549                           ; 1 bytes @ 0x0
   550                           
   551  0020                     ?_writeEEPROM:	
   552                           ; 1 bytes @ 0x0
   553                           
   554  0020                     ??_readEEPROM:	
   555                           ; 1 bytes @ 0x0
   556                           
   557  0020                     ?___wmul:	
   558                           ; 1 bytes @ 0x0
   559                           
   560  0020                     ?___lwdiv:	
   561                           ; 2 bytes @ 0x0
   562                           
   563  0020                     ?___lwmod:	
   564                           ; 2 bytes @ 0x0
   565                           
   566  0020                     cicloDeTrabajo@valor:	
   567                           ; 2 bytes @ 0x0
   568                           
   569  0020                     SendChar@caracter:	
   570                           ; 1 bytes @ 0x0
   571                           
   572  0020                     writeEEPROM@direccion:	
   573                           ; 1 bytes @ 0x0
   574                           
   575  0020                     readEEPROM@direccion:	
   576                           ; 1 bytes @ 0x0
   577                           
   578  0020                     _isdigit$1211:	
   579                           ; 1 bytes @ 0x0
   580                           
   581  0020                     ___wmul@multiplier:	
   582                           ; 1 bytes @ 0x0
   583                           
   584  0020                     ___lwdiv@divisor:	
   585                           ; 2 bytes @ 0x0
   586                           
   587  0020                     ___lwmod@divisor:	
   588                           ; 2 bytes @ 0x0
   589                           
   590                           
   591                           ; 2 bytes @ 0x0
   592  0020                     	ds	1
   593  0021                     ?_moveCCPservo:
   594  0021                     ?_SendString:	
   595                           ; 1 bytes @ 0x1
   596                           
   597  0021                     ??_writeEEPROM:	
   598                           ; 1 bytes @ 0x1
   599                           
   600  0021                     moveCCPservo@servo:	
   601                           ; 1 bytes @ 0x1
   602                           
   603  0021                     writeEEPROM@data:	
   604                           ; 1 bytes @ 0x1
   605                           
   606  0021                     isdigit@c:	
   607                           ; 1 bytes @ 0x1
   608                           
   609  0021                     SendString@string:	
   610                           ; 1 bytes @ 0x1
   611                           
   612                           
   613                           ; 2 bytes @ 0x1
   614  0021                     	ds	1
   615  0022                     ??_moveCCPservo:
   616  0022                     ___wmul@multiplicand:	
   617                           ; 1 bytes @ 0x2
   618                           
   619  0022                     ___lwdiv@dividend:	
   620                           ; 2 bytes @ 0x2
   621                           
   622  0022                     ___lwmod@dividend:	
   623                           ; 2 bytes @ 0x2
   624                           
   625                           
   626                           ; 2 bytes @ 0x2
   627  0022                     	ds	1
   628  0023                     SendString@largo:
   629                           
   630                           ; 1 bytes @ 0x3
   631  0023                     	ds	1
   632  0024                     ??_SendString:
   633  0024                     ??___wmul:	
   634                           ; 1 bytes @ 0x4
   635                           
   636  0024                     ??___lwdiv:	
   637                           ; 1 bytes @ 0x4
   638                           
   639  0024                     ??___lwmod:	
   640                           ; 1 bytes @ 0x4
   641                           
   642  0024                     moveCCPservo@angle:	
   643                           ; 1 bytes @ 0x4
   644                           
   645  0024                     ___wmul@product:	
   646                           ; 1 bytes @ 0x4
   647                           
   648                           
   649                           ; 2 bytes @ 0x4
   650  0024                     	ds	1
   651  0025                     moveCCPservo@valor:
   652  0025                     ___lwmod@counter:	
   653                           ; 1 bytes @ 0x5
   654                           
   655  0025                     ___lwdiv@quotient:	
   656                           ; 1 bytes @ 0x5
   657                           
   658                           
   659                           ; 2 bytes @ 0x5
   660  0025                     	ds	1
   661  0026                     ??_aletear:
   662  0026                     ??_moonwalk:	
   663                           ; 1 bytes @ 0x6
   664                           
   665  0026                     ?_atoi:	
   666                           ; 1 bytes @ 0x6
   667                           
   668                           
   669                           ; 2 bytes @ 0x6
   670  0026                     	ds	1
   671  0027                     ___lwdiv@counter:
   672  0027                     SendString@i:	
   673                           ; 1 bytes @ 0x7
   674                           
   675                           
   676                           ; 2 bytes @ 0x7
   677  0027                     	ds	1
   678  0028                     ??_atoi:
   679  0028                     ?_utoa:	
   680                           ; 1 bytes @ 0x8
   681                           
   682  0028                     aletear@i:	
   683                           ; 1 bytes @ 0x8
   684                           
   685  0028                     moonwalk@i:	
   686                           ; 1 bytes @ 0x8
   687                           
   688  0028                     utoa@val:	
   689                           ; 1 bytes @ 0x8
   690                           
   691                           
   692                           ; 2 bytes @ 0x8
   693  0028                     	ds	1
   694  0029                     aletear@i_731:
   695  0029                     moonwalk@i_736:	
   696                           ; 1 bytes @ 0x9
   697                           
   698                           
   699                           ; 1 bytes @ 0x9
   700  0029                     	ds	1
   701  002A                     aletear@i_733:
   702  002A                     moonwalk@i_737:	
   703                           ; 1 bytes @ 0xA
   704                           
   705  002A                     atoi@sign:	
   706                           ; 1 bytes @ 0xA
   707                           
   708  002A                     utoa@base:	
   709                           ; 1 bytes @ 0xA
   710                           
   711                           
   712                           ; 2 bytes @ 0xA
   713  002A                     	ds	1
   714  002B                     moonwalk@i_738:
   715  002B                     atoi@a:	
   716                           ; 1 bytes @ 0xB
   717                           
   718                           
   719                           ; 2 bytes @ 0xB
   720  002B                     	ds	1
   721  002C                     ??_utoa:
   722                           
   723                           ; 1 bytes @ 0xC
   724  002C                     	ds	1
   725  002D                     atoi@s:
   726  002D                     utoa@v:	
   727                           ; 1 bytes @ 0xD
   728                           
   729                           
   730                           ; 2 bytes @ 0xD
   731  002D                     	ds	1
   732  002E                     ??_ejecutarComando:
   733                           
   734                           ; 1 bytes @ 0xE
   735  002E                     	ds	1
   736  002F                     utoa@c:
   737                           
   738                           ; 1 bytes @ 0xF
   739  002F                     	ds	1
   740  0030                     utoa@buf:
   741  0030                     ejecutarComando@numeros:	
   742                           ; 1 bytes @ 0x10
   743                           
   744                           
   745                           ; 2 bytes @ 0x10
   746  0030                     	ds	1
   747  0031                     ?_itoa:
   748  0031                     itoa@val:	
   749                           ; 1 bytes @ 0x11
   750                           
   751                           
   752                           ; 2 bytes @ 0x11
   753  0031                     	ds	2
   754  0033                     itoa@base:
   755                           
   756                           ; 2 bytes @ 0x13
   757  0033                     	ds	2
   758  0035                     ??_itoa:
   759                           
   760                           ; 1 bytes @ 0x15
   761  0035                     	ds	2
   762  0037                     itoa@buf:
   763                           
   764                           ; 1 bytes @ 0x17
   765  0037                     	ds	1
   766  0038                     ??_savePosition:
   767  0038                     ??_readPosition:	
   768                           ; 1 bytes @ 0x18
   769                           
   770                           
   771                           ; 1 bytes @ 0x18
   772  0038                     	ds	2
   773  003A                     savePosition@i:
   774  003A                     readPosition@i:	
   775                           ; 1 bytes @ 0x1A
   776                           
   777                           
   778                           ; 1 bytes @ 0x1A
   779  003A                     	ds	1
   780  003B                     ??_main:
   781                           
   782                           ; 1 bytes @ 0x1B
   783  003B                     	ds	1
   784                           
   785                           	psect	maintext
   786  0369                     __pmaintext:	
   787 ;;
   788 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   789 ;;
   790 ;; *************** function _main *****************
   791 ;; Defined at:
   792 ;;		line 181 in file "machorrobot.c"
   793 ;; Parameters:    Size  Location     Type
   794 ;;		None
   795 ;; Auto vars:     Size  Location     Type
   796 ;;		None
   797 ;; Return value:  Size  Location     Type
   798 ;;                  1    wreg      void 
   799 ;; Registers used:
   800 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   801 ;; Tracked objects:
   802 ;;		On entry : B00/0
   803 ;;		On exit  : 0/0
   804 ;;		Unchanged: 0/0
   805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   806 ;;      Params:         0       0       0       0       0
   807 ;;      Locals:         0       0       0       0       0
   808 ;;      Temps:          0       1       0       0       0
   809 ;;      Totals:         0       1       0       0       0
   810 ;;Total ram usage:        1 bytes
   811 ;; Hardware stack levels required when called:    6
   812 ;; This function calls:
   813 ;;		_aletear
   814 ;;		_ejecutarComando
   815 ;;		_initUart
   816 ;;		_moonwalk
   817 ;;		_readPosition
   818 ;;		_savePosition
   819 ;; This function is called by:
   820 ;;		Startup code after reset
   821 ;; This function uses a non-reentrant model
   822 ;;
   823                           
   824                           
   825                           ;psect for function _main
   826  0369                     _main:
   827  0369                     l2217:	
   828                           ;incstack = 0
   829                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   830                           
   831                           
   832                           ;machorrobot.c: 182:     ANSEL = 0; ANSELH = 0;
   833  0369  1683               	bsf	3,5	;RP0=1, select bank3
   834  036A  1703               	bsf	3,6	;RP1=1, select bank3
   835  036B  0188               	clrf	8	;volatile
   836                           
   837                           ;machorrobot.c: 183: 
   838  036C  0189               	clrf	9	;volatile
   839  036D                     l2219:
   840                           
   841                           ;machorrobot.c: 184:     TRISA = 255;
   842  036D  30FF               	movlw	255
   843  036E  1683               	bsf	3,5	;RP0=1, select bank1
   844  036F  1303               	bcf	3,6	;RP1=0, select bank1
   845  0370  0085               	movwf	5	;volatile
   846  0371                     l2221:
   847                           
   848                           ;machorrobot.c: 185:     TRISAbits.TRISA3 = 0;
   849  0371  1185               	bcf	5,3	;volatile
   850  0372                     l2223:
   851                           
   852                           ;machorrobot.c: 186:     TRISC = 0;
   853  0372  0187               	clrf	7	;volatile
   854  0373                     l2225:
   855                           
   856                           ;machorrobot.c: 187:     TRISD = 0;
   857  0373  0188               	clrf	8	;volatile
   858  0374                     l2227:
   859                           
   860                           ;machorrobot.c: 188:     TRISB = 255;
   861  0374  30FF               	movlw	255
   862  0375  0086               	movwf	6	;volatile
   863  0376                     l2229:
   864                           
   865                           ;machorrobot.c: 189:     TRISBbits.TRISB7 = 0;
   866  0376  1386               	bcf	6,7	;volatile
   867  0377                     l2231:
   868                           
   869                           ;machorrobot.c: 190:     TRISBbits.TRISB6 = 0;
   870  0377  1306               	bcf	6,6	;volatile
   871  0378                     l2233:
   872                           
   873                           ;machorrobot.c: 192:     PORTBbits.RB6 = 1;
   874  0378  1283               	bcf	3,5	;RP0=0, select bank0
   875  0379  1303               	bcf	3,6	;RP1=0, select bank0
   876  037A  1706               	bsf	6,6	;volatile
   877  037B                     l2235:
   878                           
   879                           ;machorrobot.c: 193:     PORTBbits.RB7 = 1;
   880  037B  1786               	bsf	6,7	;volatile
   881  037C                     l2237:
   882                           
   883                           ;machorrobot.c: 194:     T2CONbits.TOUTPS = 0;
   884  037C  3087               	movlw	-121
   885  037D  0592               	andwf	18,f	;volatile
   886  037E                     l2239:
   887                           
   888                           ;machorrobot.c: 195:     T2CONbits.T2CKPS = 2;
   889  037E  0812               	movf	18,w	;volatile
   890  037F  39FC               	andlw	-4
   891  0380  3802               	iorlw	2
   892  0381  0092               	movwf	18	;volatile
   893  0382                     l2241:
   894                           
   895                           ;machorrobot.c: 197:     CCP2CONbits.CCP2M = 0b1100;
   896  0382  081D               	movf	29,w	;volatile
   897  0383  39F0               	andlw	-16
   898  0384  380C               	iorlw	12
   899  0385  009D               	movwf	29	;volatile
   900  0386                     l2243:
   901                           
   902                           ;machorrobot.c: 198:     CCP2CONbits.DC2B0 = 0;
   903  0386  121D               	bcf	29,4	;volatile
   904  0387                     l2245:
   905                           
   906                           ;machorrobot.c: 199:     CCP2CONbits.DC2B1 = 0;
   907  0387  129D               	bcf	29,5	;volatile
   908  0388                     l2247:
   909                           
   910                           ;machorrobot.c: 200:     CCP1CONbits.CCP1M = 0b1100;
   911  0388  0817               	movf	23,w	;volatile
   912  0389  39F0               	andlw	-16
   913  038A  380C               	iorlw	12
   914  038B  0097               	movwf	23	;volatile
   915  038C                     l2249:
   916                           
   917                           ;machorrobot.c: 201:     CCP1CONbits.P1M = 0;
   918  038C  303F               	movlw	-193
   919  038D  0597               	andwf	23,f	;volatile
   920  038E                     l2251:
   921                           
   922                           ;machorrobot.c: 202:     CCP1CONbits.DC1B = 0;
   923  038E  30CF               	movlw	-49
   924  038F  0597               	andwf	23,f	;volatile
   925  0390                     l2253:
   926                           
   927                           ;machorrobot.c: 205:     T2CONbits.T2CKPS = 0b11;
   928  0390  3003               	movlw	3
   929  0391  0492               	iorwf	18,f	;volatile
   930  0392                     l2255:
   931                           
   932                           ;machorrobot.c: 206:     T2CONbits.TMR2ON = 1;
   933  0392  1512               	bsf	18,2	;volatile
   934  0393                     l2257:
   935                           
   936                           ;machorrobot.c: 207:     PR2 = 249;
   937  0393  30F9               	movlw	249
   938  0394  1683               	bsf	3,5	;RP0=1, select bank1
   939  0395  1303               	bcf	3,6	;RP1=0, select bank1
   940  0396  0092               	movwf	18	;volatile
   941  0397                     l2259:
   942                           
   943                           ;machorrobot.c: 209:     OPTION_REGbits.T0CS = 0;
   944  0397  1281               	bcf	1,5	;volatile
   945  0398                     l2261:
   946                           
   947                           ;machorrobot.c: 210:     OPTION_REGbits.PSA = 0;
   948  0398  1181               	bcf	1,3	;volatile
   949  0399                     l2263:
   950                           
   951                           ;machorrobot.c: 211:     OPTION_REGbits.PS = 0b011;
   952  0399  0801               	movf	1,w	;volatile
   953  039A  39F8               	andlw	-8
   954  039B  3803               	iorlw	3
   955  039C  0081               	movwf	1	;volatile
   956  039D                     l2265:
   957                           
   958                           ;machorrobot.c: 214:     INTCONbits.GIE = 1;
   959  039D  178B               	bsf	11,7	;volatile
   960  039E                     l2267:
   961                           
   962                           ;machorrobot.c: 215:     INTCONbits.PEIE = 1;
   963  039E  170B               	bsf	11,6	;volatile
   964  039F                     l2269:
   965                           
   966                           ;machorrobot.c: 216:     INTCONbits.T0IE = 1;
   967  039F  168B               	bsf	11,5	;volatile
   968  03A0                     l2271:
   969                           
   970                           ;machorrobot.c: 217:     TMR0 = 0;
   971  03A0  1283               	bcf	3,5	;RP0=0, select bank0
   972  03A1  1303               	bcf	3,6	;RP1=0, select bank0
   973  03A2  0181               	clrf	1	;volatile
   974  03A3                     l2273:
   975                           
   976                           ;machorrobot.c: 219:     initUart();
   977  03A3  120A  158A  2767  120A  118A  	fcall	_initUart
   978  03A8                     l2275:
   979                           
   980                           ;machorrobot.c: 224:     EECON1bits.EEPGD = 0;
   981  03A8  1683               	bsf	3,5	;RP0=1, select bank3
   982  03A9  1703               	bsf	3,6	;RP1=1, select bank3
   983  03AA  138C               	bcf	12,7	;volsfr
   984  03AB                     l2277:
   985                           
   986                           ;machorrobot.c: 229:     ANSEL = 3;
   987  03AB  3003               	movlw	3
   988  03AC  0088               	movwf	8	;volatile
   989  03AD                     l2279:
   990                           
   991                           ;machorrobot.c: 231:     ADCON0bits.ADCS = 0b01;
   992  03AD  1283               	bcf	3,5	;RP0=0, select bank0
   993  03AE  1303               	bcf	3,6	;RP1=0, select bank0
   994  03AF  081F               	movf	31,w	;volatile
   995  03B0  393F               	andlw	-193
   996  03B1  3840               	iorlw	64
   997  03B2  009F               	movwf	31	;volatile
   998  03B3                     l2281:
   999                           
  1000                           ;machorrobot.c: 232:     ADCON0bits.CHS = 0;
  1001  03B3  30C3               	movlw	-61
  1002  03B4  059F               	andwf	31,f	;volatile
  1003  03B5                     l2283:
  1004                           
  1005                           ;machorrobot.c: 233:     ADCON1 = 0;
  1006  03B5  1683               	bsf	3,5	;RP0=1, select bank1
  1007  03B6  1303               	bcf	3,6	;RP1=0, select bank1
  1008  03B7  019F               	clrf	31	;volatile
  1009  03B8                     l2285:
  1010                           
  1011                           ;machorrobot.c: 234:     ADCON0bits.ADON = 1;
  1012  03B8  1283               	bcf	3,5	;RP0=0, select bank0
  1013  03B9  1303               	bcf	3,6	;RP1=0, select bank0
  1014  03BA  141F               	bsf	31,0	;volatile
  1015  03BB                     l2287:
  1016                           
  1017                           ;machorrobot.c: 235:     ADCON0bits.GO = 1;
  1018  03BB  149F               	bsf	31,1	;volatile
  1019  03BC                     l2289:
  1020                           
  1021                           ;machorrobot.c: 241:     T1CONbits.T1GINV = 1;
  1022  03BC  1790               	bsf	16,7	;volatile
  1023  03BD                     l2291:
  1024                           
  1025                           ;machorrobot.c: 242:     T1CONbits.TMR1GE = 1;
  1026  03BD  1710               	bsf	16,6	;volatile
  1027  03BE                     l2293:
  1028                           
  1029                           ;machorrobot.c: 243:     T1CONbits.T1CKPS = 0;
  1030  03BE  30CF               	movlw	-49
  1031  03BF  0590               	andwf	16,f	;volatile
  1032  03C0                     l2295:
  1033                           
  1034                           ;machorrobot.c: 244:     T1CONbits.TMR1CS = 0;
  1035  03C0  1090               	bcf	16,1	;volatile
  1036  03C1                     l2297:
  1037                           
  1038                           ;machorrobot.c: 245:     T1CONbits.TMR1ON = 1;
  1039  03C1  1410               	bsf	16,0	;volatile
  1040  03C2                     l2299:
  1041                           
  1042                           ;machorrobot.c: 247:     TMR1 = 0;
  1043  03C2  018E               	clrf	14	;volatile
  1044  03C3  018F               	clrf	15	;volatile
  1045  03C4                     l2301:
  1046                           
  1047                           ;machorrobot.c: 249:     OPTION_REGbits.INTEDG = 0;
  1048  03C4  1683               	bsf	3,5	;RP0=1, select bank1
  1049  03C5  1303               	bcf	3,6	;RP1=0, select bank1
  1050  03C6  1301               	bcf	1,6	;volatile
  1051  03C7                     l2303:
  1052                           
  1053                           ;machorrobot.c: 250:     INTCONbits.INTE = 1;
  1054  03C7  160B               	bsf	11,4	;volatile
  1055  03C8                     l2305:
  1056                           
  1057                           ;machorrobot.c: 252:     numero[0] = ' ';
  1058  03C8  3020               	movlw	32
  1059  03C9  1283               	bcf	3,5	;RP0=0, select bank0
  1060  03CA  1303               	bcf	3,6	;RP1=0, select bank0
  1061  03CB  00BB               	movwf	??_main
  1062  03CC  083B               	movf	??_main,w
  1063  03CD  00CA               	movwf	_numero	;volatile
  1064  03CE                     l2307:
  1065                           
  1066                           ;machorrobot.c: 253:     numero[1] = ' ';
  1067  03CE  3020               	movlw	32
  1068  03CF  00BB               	movwf	??_main
  1069  03D0  083B               	movf	??_main,w
  1070  03D1  00CB               	movwf	_numero+1	;volatile
  1071  03D2                     l2309:
  1072                           
  1073                           ;machorrobot.c: 254:     numero[2] = ' ';
  1074  03D2  3020               	movlw	32
  1075  03D3  00BB               	movwf	??_main
  1076  03D4  083B               	movf	??_main,w
  1077  03D5  00CC               	movwf	_numero+2	;volatile
  1078  03D6                     l2311:
  1079                           
  1080                           ;machorrobot.c: 255:     numero[3] = '\0';
  1081  03D6  01CD               	clrf	_numero+3	;volatile
  1082  03D7                     l2313:
  1083                           
  1084                           ;machorrobot.c: 257:     PORTA = 0;
  1085  03D7  0185               	clrf	5	;volatile
  1086  03D8                     l2315:
  1087                           
  1088                           ;machorrobot.c: 260:         portAanterior = portAactual;
  1089  03D8  1283               	bcf	3,5	;RP0=0, select bank0
  1090  03D9  1303               	bcf	3,6	;RP1=0, select bank0
  1091  03DA  084F               	movf	_portAactual,w
  1092  03DB  00BB               	movwf	??_main
  1093  03DC  083B               	movf	??_main,w
  1094  03DD  00CE               	movwf	_portAanterior
  1095  03DE                     l2317:
  1096                           
  1097                           ;machorrobot.c: 261:         portAactual = PORTA;
  1098  03DE  0805               	movf	5,w	;volatile
  1099  03DF  00BB               	movwf	??_main
  1100  03E0  083B               	movf	??_main,w
  1101  03E1  00CF               	movwf	_portAactual
  1102  03E2                     l2319:
  1103                           
  1104                           ;machorrobot.c: 263:         if((portAanterior&0b100)==4 && (portAactual&0b100)==0){
  1105  03E2  1D4E               	btfss	_portAanterior,2
  1106  03E3  2BE5               	goto	u1181
  1107  03E4  2BE6               	goto	u1180
  1108  03E5                     u1181:
  1109  03E5  2BEF               	goto	l2325
  1110  03E6                     u1180:
  1111  03E6                     l2321:
  1112  03E6  194F               	btfsc	_portAactual,2
  1113  03E7  2BE9               	goto	u1191
  1114  03E8  2BEA               	goto	u1190
  1115  03E9                     u1191:
  1116  03E9  2BEF               	goto	l2325
  1117  03EA                     u1190:
  1118  03EA                     l2323:
  1119                           
  1120                           ;machorrobot.c: 264:             savePosition();
  1121  03EA  120A  118A  215A  120A  118A  	fcall	_savePosition
  1122  03EF                     l2325:
  1123                           
  1124                           ;machorrobot.c: 266:         if((portAanterior&0b10000)==16 && (portAactual&0b10000)==0)
      +                          {
  1125  03EF  1283               	bcf	3,5	;RP0=0, select bank0
  1126  03F0  1303               	bcf	3,6	;RP1=0, select bank0
  1127  03F1  1E4E               	btfss	_portAanterior,4
  1128  03F2  2BF4               	goto	u1201
  1129  03F3  2BF5               	goto	u1200
  1130  03F4                     u1201:
  1131  03F4  2BFE               	goto	l2331
  1132  03F5                     u1200:
  1133  03F5                     l2327:
  1134  03F5  1A4F               	btfsc	_portAactual,4
  1135  03F6  2BF8               	goto	u1211
  1136  03F7  2BF9               	goto	u1210
  1137  03F8                     u1211:
  1138  03F8  2BFE               	goto	l2331
  1139  03F9                     u1210:
  1140  03F9                     l2329:
  1141                           
  1142                           ;machorrobot.c: 267:             readPosition();
  1143  03F9  120A  118A  2266  120A  118A  	fcall	_readPosition
  1144  03FE                     l2331:
  1145                           
  1146                           ;machorrobot.c: 275:         if (adc1>=adc2 )aletear();
  1147  03FE  1283               	bcf	3,5	;RP0=0, select bank0
  1148  03FF  1303               	bcf	3,6	;RP1=0, select bank0
  1149  0400  0841               	movf	_adc2,w	;volatile
  1150  0401  0242               	subwf	_adc1,w	;volatile
  1151  0402  1C03               	skipc
  1152  0403  2C05               	goto	u1221
  1153  0404  2C06               	goto	u1220
  1154  0405                     u1221:
  1155  0405  2C0B               	goto	l2335
  1156  0406                     u1220:
  1157  0406                     l2333:
  1158  0406  120A  118A  264E  120A  118A  	fcall	_aletear
  1159  040B                     l2335:
  1160                           
  1161                           ;machorrobot.c: 278:         if(leerSensor){
  1162  040B  1283               	bcf	3,5	;RP0=0, select bank0
  1163  040C  1303               	bcf	3,6	;RP1=0, select bank0
  1164  040D  0850               	movf	_leerSensor,w	;volatile
  1165  040E  1903               	btfsc	3,2
  1166  040F  2C11               	goto	u1231
  1167  0410  2C12               	goto	u1230
  1168  0411                     u1231:
  1169  0411  2C1E               	goto	l2345
  1170  0412                     u1230:
  1171  0412                     l2337:
  1172                           
  1173                           ;machorrobot.c: 279:             PORTAbits.RA3 = 1;
  1174  0412  1585               	bsf	5,3	;volatile
  1175  0413                     l2339:
  1176                           
  1177                           ;machorrobot.c: 280:             _delay((unsigned long)((10)*(4000000/4000000.0)));
  1178  0413  3002               	movlw	2
  1179  0414  1283               	bcf	3,5	;RP0=0, select bank0
  1180  0415  1303               	bcf	3,6	;RP1=0, select bank0
  1181  0416  00BB               	movwf	??_main
  1182  0417                     u1267:
  1183  0417  0BBB               	decfsz	??_main,f
  1184  0418  2C17               	goto	u1267
  1185  0419  0000               	nop
  1186  041A                     l2341:
  1187                           
  1188                           ;machorrobot.c: 281:             PORTAbits.RA3 = 0;
  1189  041A  1283               	bcf	3,5	;RP0=0, select bank0
  1190  041B  1303               	bcf	3,6	;RP1=0, select bank0
  1191  041C  1185               	bcf	5,3	;volatile
  1192  041D                     l2343:
  1193                           
  1194                           ;machorrobot.c: 282:             leerSensor =0;
  1195  041D  01D0               	clrf	_leerSensor	;volatile
  1196  041E                     l2345:
  1197                           
  1198                           ;machorrobot.c: 287:         if(tiempo <= 250) moonwalk();
  1199  041E  083D               	movf	_tiempo+1,w	;volatile
  1200  041F  3A80               	xorlw	128
  1201  0420  00FF               	movwf	btemp+1
  1202  0421  3080               	movlw	128
  1203  0422  027F               	subwf	btemp+1,w
  1204  0423  1D03               	skipz
  1205  0424  2C27               	goto	u1245
  1206  0425  30FB               	movlw	251
  1207  0426  023C               	subwf	_tiempo,w	;volatile
  1208  0427                     u1245:
  1209  0427  1803               	skipnc
  1210  0428  2C2A               	goto	u1241
  1211  0429  2C2B               	goto	u1240
  1212  042A                     u1241:
  1213  042A  2C30               	goto	l2349
  1214  042B                     u1240:
  1215  042B                     l2347:
  1216  042B  120A  118A  2442  120A  118A  	fcall	_moonwalk
  1217  0430                     l2349:
  1218                           
  1219                           ;machorrobot.c: 288:         if(ejecutaComando){
  1220  0430  1283               	bcf	3,5	;RP0=0, select bank0
  1221  0431  1303               	bcf	3,6	;RP1=0, select bank0
  1222  0432  083E               	movf	_ejecutaComando,w	;volatile
  1223  0433  1903               	btfsc	3,2
  1224  0434  2C36               	goto	u1251
  1225  0435  2C37               	goto	u1250
  1226  0436                     u1251:
  1227  0436  2BD8               	goto	l2315
  1228  0437                     u1250:
  1229  0437                     l2351:
  1230                           
  1231                           ;machorrobot.c: 289:             ejecutaComando=0;
  1232  0437  01BE               	clrf	_ejecutaComando	;volatile
  1233                           
  1234                           ;machorrobot.c: 290:             hayComando = 0;
  1235  0438  01BF               	clrf	_hayComando	;volatile
  1236  0439                     l2353:
  1237                           
  1238                           ;machorrobot.c: 291:             ejecutarComando();
  1239  0439  120A  118A  255B  120A  118A  	fcall	_ejecutarComando
  1240  043E  2BD8               	goto	l2315
  1241  043F  120A  118A  280E   	ljmp	start
  1242  0442                     __end_of_main:
  1243                           
  1244                           	psect	text1
  1245  015A                     __ptext1:	
  1246 ;; *************** function _savePosition *****************
  1247 ;; Defined at:
  1248 ;;		line 532 in file "machorrobot.c"
  1249 ;; Parameters:    Size  Location     Type
  1250 ;;		None
  1251 ;; Auto vars:     Size  Location     Type
  1252 ;;  i               1   26[BANK0 ] unsigned char 
  1253 ;; Return value:  Size  Location     Type
  1254 ;;                  1    wreg      void 
  1255 ;; Registers used:
  1256 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1257 ;; Tracked objects:
  1258 ;;		On entry : 0/0
  1259 ;;		On exit  : 0/0
  1260 ;;		Unchanged: 0/0
  1261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1262 ;;      Params:         0       0       0       0       0
  1263 ;;      Locals:         0       1       0       0       0
  1264 ;;      Temps:          0       2       0       0       0
  1265 ;;      Totals:         0       3       0       0       0
  1266 ;;Total ram usage:        3 bytes
  1267 ;; Hardware stack levels used:    1
  1268 ;; Hardware stack levels required when called:    5
  1269 ;; This function calls:
  1270 ;;		_SendChar
  1271 ;;		_SendString
  1272 ;;		_itoa
  1273 ;;		_writeEEPROM
  1274 ;; This function is called by:
  1275 ;;		_main
  1276 ;; This function uses a non-reentrant model
  1277 ;;
  1278                           
  1279                           
  1280                           ;psect for function _savePosition
  1281  015A                     _savePosition:
  1282  015A                     l1911:	
  1283                           ;incstack = 0
  1284                           ; Regs used in _savePosition: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1285                           
  1286                           
  1287                           ;machorrobot.c: 534:     SendString("Guardando Posiciones:\n",75);
  1288  015A  3018               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1289  015B  1283               	bcf	3,5	;RP0=0, select bank0
  1290  015C  1303               	bcf	3,6	;RP1=0, select bank0
  1291  015D  00A1               	movwf	SendString@string
  1292  015E  3080               	movlw	128
  1293  015F  00A2               	movwf	SendString@string+1
  1294  0160  304B               	movlw	75
  1295  0161  00B8               	movwf	??_savePosition
  1296  0162  0838               	movf	??_savePosition,w
  1297  0163  00A3               	movwf	SendString@largo
  1298  0164  120A  118A  26C0  120A  118A  	fcall	_SendString
  1299  0169                     l1913:
  1300                           
  1301                           ;machorrobot.c: 535:     for (char i = 0; i<4; i++){
  1302  0169  1283               	bcf	3,5	;RP0=0, select bank0
  1303  016A  1303               	bcf	3,6	;RP1=0, select bank0
  1304  016B  01BA               	clrf	savePosition@i
  1305  016C                     l1919:
  1306                           
  1307                           ;machorrobot.c: 536:         writeEEPROM(angulos[i],i);
  1308  016C  083A               	movf	savePosition@i,w
  1309  016D  00B8               	movwf	??_savePosition
  1310  016E  0838               	movf	??_savePosition,w
  1311  016F  00A0               	movwf	writeEEPROM@direccion
  1312  0170  083A               	movf	savePosition@i,w
  1313  0171  3E78               	addlw	(low (_angulos| 0))& (0+255)
  1314  0172  0084               	movwf	4
  1315  0173  0800               	movf	0,w
  1316  0174  120A  118A  27DF  120A  118A  	fcall	_writeEEPROM
  1317                           
  1318                           ;machorrobot.c: 538:         itoa(debug,i+1,10);
  1319  0179  1283               	bcf	3,5	;RP0=0, select bank0
  1320  017A  1303               	bcf	3,6	;RP1=0, select bank0
  1321  017B  083A               	movf	savePosition@i,w
  1322  017C  3E01               	addlw	1
  1323  017D  00B1               	movwf	itoa@val
  1324  017E  3000               	movlw	0
  1325  017F  1803               	skipnc
  1326  0180  3001               	movlw	1
  1327  0181  00B2               	movwf	itoa@val+1
  1328  0182  300A               	movlw	10
  1329  0183  00B3               	movwf	itoa@base
  1330  0184  3000               	movlw	0
  1331  0185  00B4               	movwf	itoa@base+1
  1332  0186  3044               	movlw	(low (_debug| 0))& (0+255)
  1333  0187  120A  158A  27B3  120A  118A  	fcall	_itoa
  1334  018C                     l1921:
  1335                           
  1336                           ;machorrobot.c: 539:         SendString(debug,6);
  1337  018C  3044               	movlw	(low (_debug| 0))& (0+255)
  1338  018D  1283               	bcf	3,5	;RP0=0, select bank0
  1339  018E  1303               	bcf	3,6	;RP1=0, select bank0
  1340  018F  00A1               	movwf	SendString@string
  1341  0190  3000               	movlw	0
  1342  0191  00A2               	movwf	SendString@string+1
  1343  0192  3006               	movlw	6
  1344  0193  00B8               	movwf	??_savePosition
  1345  0194  0838               	movf	??_savePosition,w
  1346  0195  00A3               	movwf	SendString@largo
  1347  0196  120A  118A  26C0  120A  118A  	fcall	_SendString
  1348  019B                     l1923:
  1349                           
  1350                           ;machorrobot.c: 540:         SendString(") ",5);
  1351  019B  3030               	movlw	(low (((STR_3+1)-__stringbase)| (0+32768)))& (0+255)
  1352  019C  1283               	bcf	3,5	;RP0=0, select bank0
  1353  019D  1303               	bcf	3,6	;RP1=0, select bank0
  1354  019E  00A1               	movwf	SendString@string
  1355  019F  3080               	movlw	128
  1356  01A0  00A2               	movwf	SendString@string+1
  1357  01A1  3005               	movlw	5
  1358  01A2  00B8               	movwf	??_savePosition
  1359  01A3  0838               	movf	??_savePosition,w
  1360  01A4  00A3               	movwf	SendString@largo
  1361  01A5  120A  118A  26C0  120A  118A  	fcall	_SendString
  1362                           
  1363                           ;machorrobot.c: 541:         itoa(debug,angulos[i],10);
  1364  01AA  1283               	bcf	3,5	;RP0=0, select bank0
  1365  01AB  1303               	bcf	3,6	;RP1=0, select bank0
  1366  01AC  083A               	movf	savePosition@i,w
  1367  01AD  3E78               	addlw	(low (_angulos| 0))& (0+255)
  1368  01AE  0084               	movwf	4
  1369  01AF  0800               	movf	0,w
  1370  01B0  00B8               	movwf	??_savePosition
  1371  01B1  01B9               	clrf	??_savePosition+1
  1372  01B2  0838               	movf	??_savePosition,w
  1373  01B3  00B1               	movwf	itoa@val
  1374  01B4  0839               	movf	??_savePosition+1,w
  1375  01B5  00B2               	movwf	itoa@val+1
  1376  01B6  300A               	movlw	10
  1377  01B7  00B3               	movwf	itoa@base
  1378  01B8  3000               	movlw	0
  1379  01B9  00B4               	movwf	itoa@base+1
  1380  01BA  3044               	movlw	(low (_debug| 0))& (0+255)
  1381  01BB  120A  158A  27B3  120A  118A  	fcall	_itoa
  1382  01C0                     l1925:
  1383                           
  1384                           ;machorrobot.c: 542:         SendString(debug,6);
  1385  01C0  3044               	movlw	(low (_debug| 0))& (0+255)
  1386  01C1  1283               	bcf	3,5	;RP0=0, select bank0
  1387  01C2  1303               	bcf	3,6	;RP1=0, select bank0
  1388  01C3  00A1               	movwf	SendString@string
  1389  01C4  3000               	movlw	0
  1390  01C5  00A2               	movwf	SendString@string+1
  1391  01C6  3006               	movlw	6
  1392  01C7  00B8               	movwf	??_savePosition
  1393  01C8  0838               	movf	??_savePosition,w
  1394  01C9  00A3               	movwf	SendString@largo
  1395  01CA  120A  118A  26C0  120A  118A  	fcall	_SendString
  1396  01CF                     l1927:
  1397                           
  1398                           ;machorrobot.c: 543:         SendChar('\n');
  1399  01CF  300A               	movlw	10
  1400  01D0  120A  158A  274A  120A  118A  	fcall	_SendChar
  1401  01D5                     l1929:
  1402                           
  1403                           ;machorrobot.c: 544:     }
  1404  01D5  3001               	movlw	1
  1405  01D6  1283               	bcf	3,5	;RP0=0, select bank0
  1406  01D7  1303               	bcf	3,6	;RP1=0, select bank0
  1407  01D8  00B8               	movwf	??_savePosition
  1408  01D9  0838               	movf	??_savePosition,w
  1409  01DA  07BA               	addwf	savePosition@i,f
  1410  01DB                     l1931:
  1411  01DB  3004               	movlw	4
  1412  01DC  023A               	subwf	savePosition@i,w
  1413  01DD  1C03               	skipc
  1414  01DE  29E0               	goto	u991
  1415  01DF  29E1               	goto	u990
  1416  01E0                     u991:
  1417  01E0  296C               	goto	l1919
  1418  01E1                     u990:
  1419  01E1                     l1933:
  1420                           
  1421                           ;machorrobot.c: 545:     writeEEPROM(CCPR1L,4);
  1422  01E1  3004               	movlw	4
  1423  01E2  00B8               	movwf	??_savePosition
  1424  01E3  0838               	movf	??_savePosition,w
  1425  01E4  00A0               	movwf	writeEEPROM@direccion
  1426  01E5  0815               	movf	21,w	;volatile
  1427  01E6  120A  118A  27DF  120A  118A  	fcall	_writeEEPROM
  1428  01EB                     l1935:
  1429                           
  1430                           ;machorrobot.c: 546:     SendString("5) ",4);
  1431  01EB  302F               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1432  01EC  1283               	bcf	3,5	;RP0=0, select bank0
  1433  01ED  1303               	bcf	3,6	;RP1=0, select bank0
  1434  01EE  00A1               	movwf	SendString@string
  1435  01EF  3080               	movlw	128
  1436  01F0  00A2               	movwf	SendString@string+1
  1437  01F1  3004               	movlw	4
  1438  01F2  00B8               	movwf	??_savePosition
  1439  01F3  0838               	movf	??_savePosition,w
  1440  01F4  00A3               	movwf	SendString@largo
  1441  01F5  120A  118A  26C0  120A  118A  	fcall	_SendString
  1442  01FA                     l1937:
  1443                           
  1444                           ;machorrobot.c: 547:     itoa(debug,CCPR1L,10);
  1445  01FA  1283               	bcf	3,5	;RP0=0, select bank0
  1446  01FB  1303               	bcf	3,6	;RP1=0, select bank0
  1447  01FC  0815               	movf	21,w	;volatile
  1448  01FD  00B8               	movwf	??_savePosition
  1449  01FE  01B9               	clrf	??_savePosition+1
  1450  01FF  0838               	movf	??_savePosition,w
  1451  0200  00B1               	movwf	itoa@val
  1452  0201  0839               	movf	??_savePosition+1,w
  1453  0202  00B2               	movwf	itoa@val+1
  1454  0203  300A               	movlw	10
  1455  0204  00B3               	movwf	itoa@base
  1456  0205  3000               	movlw	0
  1457  0206  00B4               	movwf	itoa@base+1
  1458  0207  3044               	movlw	(low (_debug| 0))& (0+255)
  1459  0208  120A  158A  27B3  120A  118A  	fcall	_itoa
  1460  020D                     l1939:
  1461                           
  1462                           ;machorrobot.c: 548:     SendString(debug,6);
  1463  020D  3044               	movlw	(low (_debug| 0))& (0+255)
  1464  020E  1283               	bcf	3,5	;RP0=0, select bank0
  1465  020F  1303               	bcf	3,6	;RP1=0, select bank0
  1466  0210  00A1               	movwf	SendString@string
  1467  0211  3000               	movlw	0
  1468  0212  00A2               	movwf	SendString@string+1
  1469  0213  3006               	movlw	6
  1470  0214  00B8               	movwf	??_savePosition
  1471  0215  0838               	movf	??_savePosition,w
  1472  0216  00A3               	movwf	SendString@largo
  1473  0217  120A  118A  26C0  120A  118A  	fcall	_SendString
  1474  021C                     l1941:
  1475                           
  1476                           ;machorrobot.c: 549:     SendChar('\n');
  1477  021C  300A               	movlw	10
  1478  021D  120A  158A  274A  120A  118A  	fcall	_SendChar
  1479  0222                     l1943:
  1480                           
  1481                           ;machorrobot.c: 550:     writeEEPROM(CCPR2L,5);
  1482  0222  3005               	movlw	5
  1483  0223  1283               	bcf	3,5	;RP0=0, select bank0
  1484  0224  1303               	bcf	3,6	;RP1=0, select bank0
  1485  0225  00B8               	movwf	??_savePosition
  1486  0226  0838               	movf	??_savePosition,w
  1487  0227  00A0               	movwf	writeEEPROM@direccion
  1488  0228  081B               	movf	27,w	;volatile
  1489  0229  120A  118A  27DF  120A  118A  	fcall	_writeEEPROM
  1490  022E                     l1945:
  1491                           
  1492                           ;machorrobot.c: 551:     SendString("6) ",4);
  1493  022E  3033               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1494  022F  1283               	bcf	3,5	;RP0=0, select bank0
  1495  0230  1303               	bcf	3,6	;RP1=0, select bank0
  1496  0231  00A1               	movwf	SendString@string
  1497  0232  3080               	movlw	128
  1498  0233  00A2               	movwf	SendString@string+1
  1499  0234  3004               	movlw	4
  1500  0235  00B8               	movwf	??_savePosition
  1501  0236  0838               	movf	??_savePosition,w
  1502  0237  00A3               	movwf	SendString@largo
  1503  0238  120A  118A  26C0  120A  118A  	fcall	_SendString
  1504  023D                     l1947:
  1505                           
  1506                           ;machorrobot.c: 552:     itoa(debug,CCPR2L,10);
  1507  023D  1283               	bcf	3,5	;RP0=0, select bank0
  1508  023E  1303               	bcf	3,6	;RP1=0, select bank0
  1509  023F  081B               	movf	27,w	;volatile
  1510  0240  00B8               	movwf	??_savePosition
  1511  0241  01B9               	clrf	??_savePosition+1
  1512  0242  0838               	movf	??_savePosition,w
  1513  0243  00B1               	movwf	itoa@val
  1514  0244  0839               	movf	??_savePosition+1,w
  1515  0245  00B2               	movwf	itoa@val+1
  1516  0246  300A               	movlw	10
  1517  0247  00B3               	movwf	itoa@base
  1518  0248  3000               	movlw	0
  1519  0249  00B4               	movwf	itoa@base+1
  1520  024A  3044               	movlw	(low (_debug| 0))& (0+255)
  1521  024B  120A  158A  27B3  120A  118A  	fcall	_itoa
  1522  0250                     l1949:
  1523                           
  1524                           ;machorrobot.c: 553:     SendString(debug,6);
  1525  0250  3044               	movlw	(low (_debug| 0))& (0+255)
  1526  0251  1283               	bcf	3,5	;RP0=0, select bank0
  1527  0252  1303               	bcf	3,6	;RP1=0, select bank0
  1528  0253  00A1               	movwf	SendString@string
  1529  0254  3000               	movlw	0
  1530  0255  00A2               	movwf	SendString@string+1
  1531  0256  3006               	movlw	6
  1532  0257  00B8               	movwf	??_savePosition
  1533  0258  0838               	movf	??_savePosition,w
  1534  0259  00A3               	movwf	SendString@largo
  1535  025A  120A  118A  26C0  120A  118A  	fcall	_SendString
  1536                           
  1537                           ;machorrobot.c: 554:     SendChar('\n');
  1538  025F  300A               	movlw	10
  1539  0260  120A  158A  274A  120A  118A  	fcall	_SendChar
  1540  0265                     l256:
  1541  0265  0008               	return
  1542  0266                     __end_of_savePosition:
  1543                           
  1544                           	psect	text2
  1545  07DF                     __ptext2:	
  1546 ;; *************** function _writeEEPROM *****************
  1547 ;; Defined at:
  1548 ;;		line 499 in file "machorrobot.c"
  1549 ;; Parameters:    Size  Location     Type
  1550 ;;  data            1    wreg     unsigned char 
  1551 ;;  direccion       1    0[BANK0 ] unsigned char 
  1552 ;; Auto vars:     Size  Location     Type
  1553 ;;  data            1    1[BANK0 ] unsigned char 
  1554 ;; Return value:  Size  Location     Type
  1555 ;;                  1    wreg      void 
  1556 ;; Registers used:
  1557 ;;		wreg, status,2
  1558 ;; Tracked objects:
  1559 ;;		On entry : 0/0
  1560 ;;		On exit  : 0/0
  1561 ;;		Unchanged: 0/0
  1562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1563 ;;      Params:         0       1       0       0       0
  1564 ;;      Locals:         0       1       0       0       0
  1565 ;;      Temps:          0       0       0       0       0
  1566 ;;      Totals:         0       2       0       0       0
  1567 ;;Total ram usage:        2 bytes
  1568 ;; Hardware stack levels used:    1
  1569 ;; Hardware stack levels required when called:    2
  1570 ;; This function calls:
  1571 ;;		Nothing
  1572 ;; This function is called by:
  1573 ;;		_savePosition
  1574 ;; This function uses a non-reentrant model
  1575 ;;
  1576                           
  1577                           
  1578                           ;psect for function _writeEEPROM
  1579  07DF                     _writeEEPROM:
  1580                           
  1581                           ;incstack = 0
  1582                           ; Regs used in _writeEEPROM: [wreg+status,2]
  1583                           ;writeEEPROM@data stored from wreg
  1584  07DF  1283               	bcf	3,5	;RP0=0, select bank0
  1585  07E0  1303               	bcf	3,6	;RP1=0, select bank0
  1586  07E1  00A1               	movwf	writeEEPROM@data
  1587  07E2                     l1861:
  1588                           
  1589                           ;machorrobot.c: 501:     EEADR = direccion;
  1590  07E2  0820               	movf	writeEEPROM@direccion,w
  1591  07E3  1283               	bcf	3,5	;RP0=0, select bank2
  1592  07E4  1703               	bsf	3,6	;RP1=1, select bank2
  1593  07E5  008D               	movwf	13	;volatile
  1594  07E6                     l1863:
  1595                           
  1596                           ;machorrobot.c: 502:     EEADRH = 0;
  1597  07E6  018F               	clrf	15	;volatile
  1598  07E7                     l1865:
  1599                           
  1600                           ;machorrobot.c: 504:     EEDATA = data;
  1601  07E7  1283               	bcf	3,5	;RP0=0, select bank0
  1602  07E8  1303               	bcf	3,6	;RP1=0, select bank0
  1603  07E9  0821               	movf	writeEEPROM@data,w
  1604  07EA  1283               	bcf	3,5	;RP0=0, select bank2
  1605  07EB  1703               	bsf	3,6	;RP1=1, select bank2
  1606  07EC  008C               	movwf	12	;volatile
  1607  07ED                     l1867:
  1608                           
  1609                           ;machorrobot.c: 506:     EECON1bits.EEPGD = 0;
  1610  07ED  1683               	bsf	3,5	;RP0=1, select bank3
  1611  07EE  1703               	bsf	3,6	;RP1=1, select bank3
  1612  07EF  138C               	bcf	12,7	;volsfr
  1613  07F0                     l1869:
  1614                           
  1615                           ;machorrobot.c: 507:     EECON1bits.WREN = 1;
  1616  07F0  150C               	bsf	12,2	;volsfr
  1617  07F1                     l1871:
  1618                           
  1619                           ;machorrobot.c: 510:     INTCONbits.GIE = 0;
  1620  07F1  138B               	bcf	11,7	;volatile
  1621  07F2                     l245:	
  1622                           ;machorrobot.c: 512:     while(INTCONbits.GIE);
  1623                           
  1624  07F2  1B8B               	btfsc	11,7	;volatile
  1625  07F3  2FF5               	goto	u971
  1626  07F4  2FF6               	goto	u970
  1627  07F5                     u971:
  1628  07F5  2FF2               	goto	l245
  1629  07F6                     u970:
  1630  07F6                     l1873:
  1631                           
  1632                           ;machorrobot.c: 514:     EECON2 = 0x55;
  1633  07F6  3055               	movlw	85
  1634  07F7  1683               	bsf	3,5	;RP0=1, select bank3
  1635  07F8  1703               	bsf	3,6	;RP1=1, select bank3
  1636  07F9  008D               	movwf	13	;volsfr
  1637                           
  1638                           ;machorrobot.c: 515:     EECON2 = 0xAA;
  1639  07FA  30AA               	movlw	170
  1640  07FB  008D               	movwf	13	;volsfr
  1641  07FC                     l1875:
  1642                           
  1643                           ;machorrobot.c: 516:     EECON1bits.WR = 1;
  1644  07FC  148C               	bsf	12,1	;volsfr
  1645  07FD                     l1877:
  1646                           
  1647                           ;machorrobot.c: 518:     INTCONbits.GIE = 1;
  1648  07FD  178B               	bsf	11,7	;volatile
  1649  07FE                     l1879:
  1650                           
  1651                           ;machorrobot.c: 519:     EECON1bits.WREN = 0;
  1652  07FE  110C               	bcf	12,2	;volsfr
  1653  07FF                     l248:
  1654  07FF  0008               	return
  1655  0800                     __end_of_writeEEPROM:
  1656                           
  1657                           	psect	text3
  1658  0266                     __ptext3:	
  1659 ;; *************** function _readPosition *****************
  1660 ;; Defined at:
  1661 ;;		line 558 in file "machorrobot.c"
  1662 ;; Parameters:    Size  Location     Type
  1663 ;;		None
  1664 ;; Auto vars:     Size  Location     Type
  1665 ;;  i               1   26[BANK0 ] unsigned char 
  1666 ;; Return value:  Size  Location     Type
  1667 ;;                  1    wreg      void 
  1668 ;; Registers used:
  1669 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1670 ;; Tracked objects:
  1671 ;;		On entry : 0/0
  1672 ;;		On exit  : 0/0
  1673 ;;		Unchanged: 0/0
  1674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1675 ;;      Params:         0       0       0       0       0
  1676 ;;      Locals:         0       1       0       0       0
  1677 ;;      Temps:          0       2       0       0       0
  1678 ;;      Totals:         0       3       0       0       0
  1679 ;;Total ram usage:        3 bytes
  1680 ;; Hardware stack levels used:    1
  1681 ;; Hardware stack levels required when called:    5
  1682 ;; This function calls:
  1683 ;;		_SendChar
  1684 ;;		_SendString
  1685 ;;		_itoa
  1686 ;;		_readEEPROM
  1687 ;; This function is called by:
  1688 ;;		_main
  1689 ;; This function uses a non-reentrant model
  1690 ;;
  1691                           
  1692                           
  1693                           ;psect for function _readPosition
  1694  0266                     _readPosition:
  1695  0266                     l1951:	
  1696                           ;incstack = 0
  1697                           ; Regs used in _readPosition: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1698                           
  1699                           
  1700                           ;machorrobot.c: 559:     SendString("Colocando Posiciones:\n",75);
  1701  0266  3001               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1702  0267  1283               	bcf	3,5	;RP0=0, select bank0
  1703  0268  1303               	bcf	3,6	;RP1=0, select bank0
  1704  0269  00A1               	movwf	SendString@string
  1705  026A  3080               	movlw	128
  1706  026B  00A2               	movwf	SendString@string+1
  1707  026C  304B               	movlw	75
  1708  026D  00B8               	movwf	??_readPosition
  1709  026E  0838               	movf	??_readPosition,w
  1710  026F  00A3               	movwf	SendString@largo
  1711  0270  120A  118A  26C0  120A  118A  	fcall	_SendString
  1712  0275                     l1953:
  1713                           
  1714                           ;machorrobot.c: 560:     for (char i = 0; i<4; i++){
  1715  0275  1283               	bcf	3,5	;RP0=0, select bank0
  1716  0276  1303               	bcf	3,6	;RP1=0, select bank0
  1717  0277  01BA               	clrf	readPosition@i
  1718  0278                     l1959:
  1719                           
  1720                           ;machorrobot.c: 562:         angulos[i] = readEEPROM(i);
  1721  0278  083A               	movf	readPosition@i,w
  1722  0279  120A  158A  2758  120A  118A  	fcall	_readEEPROM
  1723  027E  1283               	bcf	3,5	;RP0=0, select bank0
  1724  027F  1303               	bcf	3,6	;RP1=0, select bank0
  1725  0280  00B8               	movwf	??_readPosition
  1726  0281  083A               	movf	readPosition@i,w
  1727  0282  3E78               	addlw	(low (_angulos| 0))& (0+255)
  1728  0283  0084               	movwf	4
  1729  0284  0838               	movf	??_readPosition,w
  1730  0285  0080               	movwf	0
  1731                           
  1732                           ;machorrobot.c: 563:         itoa(debug,i+1,10);
  1733  0286  083A               	movf	readPosition@i,w
  1734  0287  3E01               	addlw	1
  1735  0288  00B1               	movwf	itoa@val
  1736  0289  3000               	movlw	0
  1737  028A  1803               	skipnc
  1738  028B  3001               	movlw	1
  1739  028C  00B2               	movwf	itoa@val+1
  1740  028D  300A               	movlw	10
  1741  028E  00B3               	movwf	itoa@base
  1742  028F  3000               	movlw	0
  1743  0290  00B4               	movwf	itoa@base+1
  1744  0291  3044               	movlw	(low (_debug| 0))& (0+255)
  1745  0292  120A  158A  27B3  120A  118A  	fcall	_itoa
  1746  0297                     l1961:
  1747                           
  1748                           ;machorrobot.c: 564:         SendString(debug,6);
  1749  0297  3044               	movlw	(low (_debug| 0))& (0+255)
  1750  0298  1283               	bcf	3,5	;RP0=0, select bank0
  1751  0299  1303               	bcf	3,6	;RP1=0, select bank0
  1752  029A  00A1               	movwf	SendString@string
  1753  029B  3000               	movlw	0
  1754  029C  00A2               	movwf	SendString@string+1
  1755  029D  3006               	movlw	6
  1756  029E  00B8               	movwf	??_readPosition
  1757  029F  0838               	movf	??_readPosition,w
  1758  02A0  00A3               	movwf	SendString@largo
  1759  02A1  120A  118A  26C0  120A  118A  	fcall	_SendString
  1760  02A6                     l1963:
  1761                           
  1762                           ;machorrobot.c: 565:         SendString(") ",5);
  1763  02A6  3030               	movlw	(low (((STR_3+1)-__stringbase)| (0+32768)))& (0+255)
  1764  02A7  1283               	bcf	3,5	;RP0=0, select bank0
  1765  02A8  1303               	bcf	3,6	;RP1=0, select bank0
  1766  02A9  00A1               	movwf	SendString@string
  1767  02AA  3080               	movlw	128
  1768  02AB  00A2               	movwf	SendString@string+1
  1769  02AC  3005               	movlw	5
  1770  02AD  00B8               	movwf	??_readPosition
  1771  02AE  0838               	movf	??_readPosition,w
  1772  02AF  00A3               	movwf	SendString@largo
  1773  02B0  120A  118A  26C0  120A  118A  	fcall	_SendString
  1774                           
  1775                           ;machorrobot.c: 566:         itoa(debug,angulos[i],10);
  1776  02B5  1283               	bcf	3,5	;RP0=0, select bank0
  1777  02B6  1303               	bcf	3,6	;RP1=0, select bank0
  1778  02B7  083A               	movf	readPosition@i,w
  1779  02B8  3E78               	addlw	(low (_angulos| 0))& (0+255)
  1780  02B9  0084               	movwf	4
  1781  02BA  0800               	movf	0,w
  1782  02BB  00B8               	movwf	??_readPosition
  1783  02BC  01B9               	clrf	??_readPosition+1
  1784  02BD  0838               	movf	??_readPosition,w
  1785  02BE  00B1               	movwf	itoa@val
  1786  02BF  0839               	movf	??_readPosition+1,w
  1787  02C0  00B2               	movwf	itoa@val+1
  1788  02C1  300A               	movlw	10
  1789  02C2  00B3               	movwf	itoa@base
  1790  02C3  3000               	movlw	0
  1791  02C4  00B4               	movwf	itoa@base+1
  1792  02C5  3044               	movlw	(low (_debug| 0))& (0+255)
  1793  02C6  120A  158A  27B3  120A  118A  	fcall	_itoa
  1794  02CB                     l1965:
  1795                           
  1796                           ;machorrobot.c: 567:         SendString(debug,6);
  1797  02CB  3044               	movlw	(low (_debug| 0))& (0+255)
  1798  02CC  1283               	bcf	3,5	;RP0=0, select bank0
  1799  02CD  1303               	bcf	3,6	;RP1=0, select bank0
  1800  02CE  00A1               	movwf	SendString@string
  1801  02CF  3000               	movlw	0
  1802  02D0  00A2               	movwf	SendString@string+1
  1803  02D1  3006               	movlw	6
  1804  02D2  00B8               	movwf	??_readPosition
  1805  02D3  0838               	movf	??_readPosition,w
  1806  02D4  00A3               	movwf	SendString@largo
  1807  02D5  120A  118A  26C0  120A  118A  	fcall	_SendString
  1808  02DA                     l1967:
  1809                           
  1810                           ;machorrobot.c: 568:         SendChar('\n');
  1811  02DA  300A               	movlw	10
  1812  02DB  120A  158A  274A  120A  118A  	fcall	_SendChar
  1813  02E0                     l1969:
  1814                           
  1815                           ;machorrobot.c: 569:     }
  1816  02E0  3001               	movlw	1
  1817  02E1  1283               	bcf	3,5	;RP0=0, select bank0
  1818  02E2  1303               	bcf	3,6	;RP1=0, select bank0
  1819  02E3  00B8               	movwf	??_readPosition
  1820  02E4  0838               	movf	??_readPosition,w
  1821  02E5  07BA               	addwf	readPosition@i,f
  1822  02E6                     l1971:
  1823  02E6  3004               	movlw	4
  1824  02E7  023A               	subwf	readPosition@i,w
  1825  02E8  1C03               	skipc
  1826  02E9  2AEB               	goto	u1001
  1827  02EA  2AEC               	goto	u1000
  1828  02EB                     u1001:
  1829  02EB  2A78               	goto	l1959
  1830  02EC                     u1000:
  1831  02EC                     l1973:
  1832                           
  1833                           ;machorrobot.c: 570:     CCPR1L = readEEPROM(4);
  1834  02EC  3004               	movlw	4
  1835  02ED  120A  158A  2758  120A  118A  	fcall	_readEEPROM
  1836  02F2  1283               	bcf	3,5	;RP0=0, select bank0
  1837  02F3  1303               	bcf	3,6	;RP1=0, select bank0
  1838  02F4  0095               	movwf	21	;volatile
  1839  02F5                     l1975:
  1840                           
  1841                           ;machorrobot.c: 571:     SendString("5) ",4);
  1842  02F5  302F               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1843  02F6  00A1               	movwf	SendString@string
  1844  02F7  3080               	movlw	128
  1845  02F8  00A2               	movwf	SendString@string+1
  1846  02F9  3004               	movlw	4
  1847  02FA  00B8               	movwf	??_readPosition
  1848  02FB  0838               	movf	??_readPosition,w
  1849  02FC  00A3               	movwf	SendString@largo
  1850  02FD  120A  118A  26C0  120A  118A  	fcall	_SendString
  1851  0302                     l1977:
  1852                           
  1853                           ;machorrobot.c: 572:     itoa(debug,CCPR1L,10);
  1854  0302  1283               	bcf	3,5	;RP0=0, select bank0
  1855  0303  1303               	bcf	3,6	;RP1=0, select bank0
  1856  0304  0815               	movf	21,w	;volatile
  1857  0305  00B8               	movwf	??_readPosition
  1858  0306  01B9               	clrf	??_readPosition+1
  1859  0307  0838               	movf	??_readPosition,w
  1860  0308  00B1               	movwf	itoa@val
  1861  0309  0839               	movf	??_readPosition+1,w
  1862  030A  00B2               	movwf	itoa@val+1
  1863  030B  300A               	movlw	10
  1864  030C  00B3               	movwf	itoa@base
  1865  030D  3000               	movlw	0
  1866  030E  00B4               	movwf	itoa@base+1
  1867  030F  3044               	movlw	(low (_debug| 0))& (0+255)
  1868  0310  120A  158A  27B3  120A  118A  	fcall	_itoa
  1869  0315                     l1979:
  1870                           
  1871                           ;machorrobot.c: 573:     SendString(debug,6);
  1872  0315  3044               	movlw	(low (_debug| 0))& (0+255)
  1873  0316  1283               	bcf	3,5	;RP0=0, select bank0
  1874  0317  1303               	bcf	3,6	;RP1=0, select bank0
  1875  0318  00A1               	movwf	SendString@string
  1876  0319  3000               	movlw	0
  1877  031A  00A2               	movwf	SendString@string+1
  1878  031B  3006               	movlw	6
  1879  031C  00B8               	movwf	??_readPosition
  1880  031D  0838               	movf	??_readPosition,w
  1881  031E  00A3               	movwf	SendString@largo
  1882  031F  120A  118A  26C0  120A  118A  	fcall	_SendString
  1883  0324                     l1981:
  1884                           
  1885                           ;machorrobot.c: 574:     SendChar('\n');
  1886  0324  300A               	movlw	10
  1887  0325  120A  158A  274A  120A  118A  	fcall	_SendChar
  1888  032A                     l1983:
  1889                           
  1890                           ;machorrobot.c: 575:     CCPR2L = readEEPROM(5);
  1891  032A  3005               	movlw	5
  1892  032B  120A  158A  2758  120A  118A  	fcall	_readEEPROM
  1893  0330  1283               	bcf	3,5	;RP0=0, select bank0
  1894  0331  1303               	bcf	3,6	;RP1=0, select bank0
  1895  0332  009B               	movwf	27	;volatile
  1896  0333                     l1985:
  1897                           
  1898                           ;machorrobot.c: 576:     SendString("6) ",4);
  1899  0333  3033               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1900  0334  00A1               	movwf	SendString@string
  1901  0335  3080               	movlw	128
  1902  0336  00A2               	movwf	SendString@string+1
  1903  0337  3004               	movlw	4
  1904  0338  00B8               	movwf	??_readPosition
  1905  0339  0838               	movf	??_readPosition,w
  1906  033A  00A3               	movwf	SendString@largo
  1907  033B  120A  118A  26C0  120A  118A  	fcall	_SendString
  1908  0340                     l1987:
  1909                           
  1910                           ;machorrobot.c: 577:     itoa(debug,CCPR2L,10);
  1911  0340  1283               	bcf	3,5	;RP0=0, select bank0
  1912  0341  1303               	bcf	3,6	;RP1=0, select bank0
  1913  0342  081B               	movf	27,w	;volatile
  1914  0343  00B8               	movwf	??_readPosition
  1915  0344  01B9               	clrf	??_readPosition+1
  1916  0345  0838               	movf	??_readPosition,w
  1917  0346  00B1               	movwf	itoa@val
  1918  0347  0839               	movf	??_readPosition+1,w
  1919  0348  00B2               	movwf	itoa@val+1
  1920  0349  300A               	movlw	10
  1921  034A  00B3               	movwf	itoa@base
  1922  034B  3000               	movlw	0
  1923  034C  00B4               	movwf	itoa@base+1
  1924  034D  3044               	movlw	(low (_debug| 0))& (0+255)
  1925  034E  120A  158A  27B3  120A  118A  	fcall	_itoa
  1926  0353                     l1989:
  1927                           
  1928                           ;machorrobot.c: 578:     SendString(debug,6);
  1929  0353  3044               	movlw	(low (_debug| 0))& (0+255)
  1930  0354  1283               	bcf	3,5	;RP0=0, select bank0
  1931  0355  1303               	bcf	3,6	;RP1=0, select bank0
  1932  0356  00A1               	movwf	SendString@string
  1933  0357  3000               	movlw	0
  1934  0358  00A2               	movwf	SendString@string+1
  1935  0359  3006               	movlw	6
  1936  035A  00B8               	movwf	??_readPosition
  1937  035B  0838               	movf	??_readPosition,w
  1938  035C  00A3               	movwf	SendString@largo
  1939  035D  120A  118A  26C0  120A  118A  	fcall	_SendString
  1940                           
  1941                           ;machorrobot.c: 579:     SendChar('\n');
  1942  0362  300A               	movlw	10
  1943  0363  120A  158A  274A  120A  118A  	fcall	_SendChar
  1944  0368                     l261:
  1945  0368  0008               	return
  1946  0369                     __end_of_readPosition:
  1947                           
  1948                           	psect	text4
  1949  0F58                     __ptext4:	
  1950 ;; *************** function _readEEPROM *****************
  1951 ;; Defined at:
  1952 ;;		line 523 in file "machorrobot.c"
  1953 ;; Parameters:    Size  Location     Type
  1954 ;;  direccion       1    wreg     unsigned char 
  1955 ;; Auto vars:     Size  Location     Type
  1956 ;;  direccion       1    0[BANK0 ] unsigned char 
  1957 ;; Return value:  Size  Location     Type
  1958 ;;                  1    wreg      unsigned char 
  1959 ;; Registers used:
  1960 ;;		wreg
  1961 ;; Tracked objects:
  1962 ;;		On entry : 0/0
  1963 ;;		On exit  : 0/0
  1964 ;;		Unchanged: 0/0
  1965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1966 ;;      Params:         0       0       0       0       0
  1967 ;;      Locals:         0       1       0       0       0
  1968 ;;      Temps:          0       0       0       0       0
  1969 ;;      Totals:         0       1       0       0       0
  1970 ;;Total ram usage:        1 bytes
  1971 ;; Hardware stack levels used:    1
  1972 ;; Hardware stack levels required when called:    2
  1973 ;; This function calls:
  1974 ;;		Nothing
  1975 ;; This function is called by:
  1976 ;;		_readPosition
  1977 ;; This function uses a non-reentrant model
  1978 ;;
  1979                           
  1980                           
  1981                           ;psect for function _readEEPROM
  1982  0F58                     _readEEPROM:
  1983                           
  1984                           ;incstack = 0
  1985                           ; Regs used in _readEEPROM: [wreg]
  1986                           ;readEEPROM@direccion stored from wreg
  1987  0F58  1283               	bcf	3,5	;RP0=0, select bank0
  1988  0F59  1303               	bcf	3,6	;RP1=0, select bank0
  1989  0F5A  00A0               	movwf	readEEPROM@direccion
  1990  0F5B                     l1881:
  1991                           
  1992                           ;machorrobot.c: 525:     EEADR = direccion;
  1993  0F5B  0820               	movf	readEEPROM@direccion,w
  1994  0F5C  1283               	bcf	3,5	;RP0=0, select bank2
  1995  0F5D  1703               	bsf	3,6	;RP1=1, select bank2
  1996  0F5E  008D               	movwf	13	;volatile
  1997  0F5F                     l1883:
  1998                           
  1999                           ;machorrobot.c: 526:     EECON1bits.EEPGD = 0;
  2000  0F5F  1683               	bsf	3,5	;RP0=1, select bank3
  2001  0F60  1703               	bsf	3,6	;RP1=1, select bank3
  2002  0F61  138C               	bcf	12,7	;volsfr
  2003  0F62                     l1885:
  2004                           
  2005                           ;machorrobot.c: 527:     EECON1bits.RD = 1;
  2006  0F62  140C               	bsf	12,0	;volsfr
  2007                           
  2008                           ;machorrobot.c: 529:     return EEDATA;
  2009  0F63  1283               	bcf	3,5	;RP0=0, select bank2
  2010  0F64  1703               	bsf	3,6	;RP1=1, select bank2
  2011  0F65  080C               	movf	12,w	;volatile
  2012  0F66                     l251:
  2013  0F66  0008               	return
  2014  0F67                     __end_of_readEEPROM:
  2015                           
  2016                           	psect	text5
  2017  0FB3                     __ptext5:	
  2018 ;; *************** function _itoa *****************
  2019 ;; Defined at:
  2020 ;;		line 4 in file "D:\machorrin\Programas\mplab\pic\sources\c90\common\itoa.c"
  2021 ;; Parameters:    Size  Location     Type
  2022 ;;  buf             1    wreg     PTR unsigned char 
  2023 ;;		 -> debug(6), 
  2024 ;;  val             2   17[BANK0 ] int 
  2025 ;;  base            2   19[BANK0 ] int 
  2026 ;; Auto vars:     Size  Location     Type
  2027 ;;  buf             1   23[BANK0 ] PTR unsigned char 
  2028 ;;		 -> debug(6), 
  2029 ;;  cp              1    0        PTR unsigned char 
  2030 ;;		 -> debug(6), 
  2031 ;; Return value:  Size  Location     Type
  2032 ;;                  1    wreg      PTR unsigned char 
  2033 ;; Registers used:
  2034 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2035 ;; Tracked objects:
  2036 ;;		On entry : 0/0
  2037 ;;		On exit  : 0/0
  2038 ;;		Unchanged: 0/0
  2039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2040 ;;      Params:         0       4       0       0       0
  2041 ;;      Locals:         0       2       0       0       0
  2042 ;;      Temps:          0       1       0       0       0
  2043 ;;      Totals:         0       7       0       0       0
  2044 ;;Total ram usage:        7 bytes
  2045 ;; Hardware stack levels used:    1
  2046 ;; Hardware stack levels required when called:    4
  2047 ;; This function calls:
  2048 ;;		_utoa
  2049 ;; This function is called by:
  2050 ;;		_savePosition
  2051 ;;		_readPosition
  2052 ;; This function uses a non-reentrant model
  2053 ;;
  2054                           
  2055                           
  2056                           ;psect for function _itoa
  2057  0FB3                     _itoa:
  2058                           
  2059                           ;incstack = 0
  2060                           ; Regs used in _itoa: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2061                           ;itoa@buf stored from wreg
  2062  0FB3  1283               	bcf	3,5	;RP0=0, select bank0
  2063  0FB4  1303               	bcf	3,6	;RP1=0, select bank0
  2064  0FB5  00B7               	movwf	itoa@buf
  2065  0FB6                     l1889:
  2066  0FB6                     l1891:
  2067  0FB6  1FB2               	btfss	itoa@val+1,7
  2068  0FB7  2FB9               	goto	u981
  2069  0FB8  2FBA               	goto	u980
  2070  0FB9                     u981:
  2071  0FB9  2FCA               	goto	l1899
  2072  0FBA                     u980:
  2073  0FBA                     l1893:
  2074  0FBA  302D               	movlw	45
  2075  0FBB  00B5               	movwf	??_itoa
  2076  0FBC  0837               	movf	itoa@buf,w
  2077  0FBD  0084               	movwf	4
  2078  0FBE  0835               	movf	??_itoa,w
  2079  0FBF  1383               	bcf	3,7	;select IRP bank0
  2080  0FC0  0080               	movwf	0
  2081  0FC1                     l1895:
  2082  0FC1  3001               	movlw	1
  2083  0FC2  00B5               	movwf	??_itoa
  2084  0FC3  0835               	movf	??_itoa,w
  2085  0FC4  07B7               	addwf	itoa@buf,f
  2086  0FC5                     l1897:
  2087  0FC5  09B1               	comf	itoa@val,f
  2088  0FC6  09B2               	comf	itoa@val+1,f
  2089  0FC7  0AB1               	incf	itoa@val,f
  2090  0FC8  1903               	skipnz
  2091  0FC9  0AB2               	incf	itoa@val+1,f
  2092  0FCA                     l1899:
  2093  0FCA  0832               	movf	itoa@val+1,w
  2094  0FCB  00A9               	movwf	utoa@val+1
  2095  0FCC  0831               	movf	itoa@val,w
  2096  0FCD  00A8               	movwf	utoa@val
  2097  0FCE  0834               	movf	itoa@base+1,w
  2098  0FCF  00AB               	movwf	utoa@base+1
  2099  0FD0  0833               	movf	itoa@base,w
  2100  0FD1  00AA               	movwf	utoa@base
  2101  0FD2  0837               	movf	itoa@buf,w
  2102  0FD3  120A  118A  25DC  120A  158A  	fcall	_utoa
  2103  0FD8                     l821:
  2104  0FD8  0008               	return
  2105  0FD9                     __end_of_itoa:
  2106                           
  2107                           	psect	text6
  2108  05DC                     __ptext6:	
  2109 ;; *************** function _utoa *****************
  2110 ;; Defined at:
  2111 ;;		line 17 in file "D:\machorrin\Programas\mplab\pic\sources\c90\common\itoa.c"
  2112 ;; Parameters:    Size  Location     Type
  2113 ;;  buf             1    wreg     PTR unsigned char 
  2114 ;;		 -> debug(6), 
  2115 ;;  val             2    8[BANK0 ] unsigned int 
  2116 ;;  base            2   10[BANK0 ] int 
  2117 ;; Auto vars:     Size  Location     Type
  2118 ;;  buf             1   16[BANK0 ] PTR unsigned char 
  2119 ;;		 -> debug(6), 
  2120 ;;  v               2   13[BANK0 ] unsigned int 
  2121 ;;  c               1   15[BANK0 ] unsigned char 
  2122 ;; Return value:  Size  Location     Type
  2123 ;;                  1    wreg      PTR unsigned char 
  2124 ;; Registers used:
  2125 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2126 ;; Tracked objects:
  2127 ;;		On entry : 0/0
  2128 ;;		On exit  : 0/0
  2129 ;;		Unchanged: 0/0
  2130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2131 ;;      Params:         0       4       0       0       0
  2132 ;;      Locals:         0       4       0       0       0
  2133 ;;      Temps:          0       1       0       0       0
  2134 ;;      Totals:         0       9       0       0       0
  2135 ;;Total ram usage:        9 bytes
  2136 ;; Hardware stack levels used:    1
  2137 ;; Hardware stack levels required when called:    3
  2138 ;; This function calls:
  2139 ;;		___lwdiv
  2140 ;;		___lwmod
  2141 ;; This function is called by:
  2142 ;;		_itoa
  2143 ;; This function uses a non-reentrant model
  2144 ;;
  2145                           
  2146                           
  2147                           ;psect for function _utoa
  2148  05DC                     _utoa:
  2149                           
  2150                           ;incstack = 0
  2151                           ; Regs used in _utoa: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2152                           ;utoa@buf stored from wreg
  2153  05DC  1283               	bcf	3,5	;RP0=0, select bank0
  2154  05DD  1303               	bcf	3,6	;RP1=0, select bank0
  2155  05DE  00B0               	movwf	utoa@buf
  2156  05DF                     l1773:
  2157  05DF  0829               	movf	utoa@val+1,w
  2158  05E0  00AE               	movwf	utoa@v+1
  2159  05E1  0828               	movf	utoa@val,w
  2160  05E2  00AD               	movwf	utoa@v
  2161  05E3                     l1775:
  2162  05E3  082B               	movf	utoa@base+1,w
  2163  05E4  00A1               	movwf	___lwdiv@divisor+1
  2164  05E5  082A               	movf	utoa@base,w
  2165  05E6  00A0               	movwf	___lwdiv@divisor
  2166  05E7  082E               	movf	utoa@v+1,w
  2167  05E8  00A3               	movwf	___lwdiv@dividend+1
  2168  05E9  082D               	movf	utoa@v,w
  2169  05EA  00A2               	movwf	___lwdiv@dividend
  2170  05EB  120A  118A  275D  120A  118A  	fcall	___lwdiv
  2171  05F0  1283               	bcf	3,5	;RP0=0, select bank0
  2172  05F1  1303               	bcf	3,6	;RP1=0, select bank0
  2173  05F2  0821               	movf	?___lwdiv+1,w
  2174  05F3  00AE               	movwf	utoa@v+1
  2175  05F4  0820               	movf	?___lwdiv,w
  2176  05F5  00AD               	movwf	utoa@v
  2177  05F6                     l1777:
  2178  05F6  3001               	movlw	1
  2179  05F7  00AC               	movwf	??_utoa
  2180  05F8  082C               	movf	??_utoa,w
  2181  05F9  07B0               	addwf	utoa@buf,f
  2182  05FA                     l1779:
  2183  05FA  082D               	movf	utoa@v,w
  2184  05FB  042E               	iorwf	utoa@v+1,w
  2185  05FC  1D03               	btfss	3,2
  2186  05FD  2DFF               	goto	u841
  2187  05FE  2E00               	goto	u840
  2188  05FF                     u841:
  2189  05FF  2DE3               	goto	l1775
  2190  0600                     u840:
  2191  0600                     l1781:
  2192  0600  0830               	movf	utoa@buf,w
  2193  0601  0084               	movwf	4
  2194  0602  1383               	bcf	3,7	;select IRP bank0
  2195  0603  0180               	clrf	0
  2196  0604                     l1783:
  2197  0604  3001               	movlw	1
  2198  0605  02B0               	subwf	utoa@buf,f
  2199  0606                     l1785:
  2200  0606  082B               	movf	utoa@base+1,w
  2201  0607  00A1               	movwf	___lwmod@divisor+1
  2202  0608  082A               	movf	utoa@base,w
  2203  0609  00A0               	movwf	___lwmod@divisor
  2204  060A  0829               	movf	utoa@val+1,w
  2205  060B  00A3               	movwf	___lwmod@dividend+1
  2206  060C  0828               	movf	utoa@val,w
  2207  060D  00A2               	movwf	___lwmod@dividend
  2208  060E  120A  118A  27A3  120A  118A  	fcall	___lwmod
  2209  0613  1283               	bcf	3,5	;RP0=0, select bank0
  2210  0614  1303               	bcf	3,6	;RP1=0, select bank0
  2211  0615  0820               	movf	?___lwmod,w
  2212  0616  00AC               	movwf	??_utoa
  2213  0617  082C               	movf	??_utoa,w
  2214  0618  00AF               	movwf	utoa@c
  2215  0619                     l1787:
  2216  0619  082B               	movf	utoa@base+1,w
  2217  061A  00A1               	movwf	___lwdiv@divisor+1
  2218  061B  082A               	movf	utoa@base,w
  2219  061C  00A0               	movwf	___lwdiv@divisor
  2220  061D  0829               	movf	utoa@val+1,w
  2221  061E  00A3               	movwf	___lwdiv@dividend+1
  2222  061F  0828               	movf	utoa@val,w
  2223  0620  00A2               	movwf	___lwdiv@dividend
  2224  0621  120A  118A  275D  120A  118A  	fcall	___lwdiv
  2225  0626  1283               	bcf	3,5	;RP0=0, select bank0
  2226  0627  1303               	bcf	3,6	;RP1=0, select bank0
  2227  0628  0821               	movf	?___lwdiv+1,w
  2228  0629  00A9               	movwf	utoa@val+1
  2229  062A  0820               	movf	?___lwdiv,w
  2230  062B  00A8               	movwf	utoa@val
  2231  062C                     l1789:
  2232  062C  300A               	movlw	10
  2233  062D  022F               	subwf	utoa@c,w
  2234  062E  1C03               	skipc
  2235  062F  2E31               	goto	u851
  2236  0630  2E32               	goto	u850
  2237  0631                     u851:
  2238  0631  2E36               	goto	l827
  2239  0632                     u850:
  2240  0632                     l1791:
  2241  0632  3007               	movlw	7
  2242  0633  00AC               	movwf	??_utoa
  2243  0634  082C               	movf	??_utoa,w
  2244  0635  07AF               	addwf	utoa@c,f
  2245  0636                     l827:
  2246  0636  3030               	movlw	48
  2247  0637  00AC               	movwf	??_utoa
  2248  0638  082C               	movf	??_utoa,w
  2249  0639  07AF               	addwf	utoa@c,f
  2250  063A                     l1793:
  2251  063A  082F               	movf	utoa@c,w
  2252  063B  00AC               	movwf	??_utoa
  2253  063C  0830               	movf	utoa@buf,w
  2254  063D  0084               	movwf	4
  2255  063E  082C               	movf	??_utoa,w
  2256  063F  1383               	bcf	3,7	;select IRP bank0
  2257  0640  0080               	movwf	0
  2258  0641                     l1795:
  2259  0641  3001               	movlw	1
  2260  0642  02B0               	subwf	utoa@buf,f
  2261  0643                     l1797:
  2262  0643  0828               	movf	utoa@val,w
  2263  0644  0429               	iorwf	utoa@val+1,w
  2264  0645  1D03               	btfss	3,2
  2265  0646  2E48               	goto	u861
  2266  0647  2E49               	goto	u860
  2267  0648                     u861:
  2268  0648  2E06               	goto	l1785
  2269  0649                     u860:
  2270  0649                     l1799:
  2271                           
  2272                           ;	Return value of _utoa is never used
  2273  0649  3001               	movlw	1
  2274  064A  00AC               	movwf	??_utoa
  2275  064B  082C               	movf	??_utoa,w
  2276  064C  07B0               	addwf	utoa@buf,f
  2277  064D                     l829:
  2278  064D  0008               	return
  2279  064E                     __end_of_utoa:
  2280                           
  2281                           	psect	text7
  2282  07A3                     __ptext7:	
  2283 ;; *************** function ___lwmod *****************
  2284 ;; Defined at:
  2285 ;;		line 5 in file "D:\machorrin\Programas\mplab\pic\sources\c90\common\lwmod.c"
  2286 ;; Parameters:    Size  Location     Type
  2287 ;;  divisor         2    0[BANK0 ] unsigned int 
  2288 ;;  dividend        2    2[BANK0 ] unsigned int 
  2289 ;; Auto vars:     Size  Location     Type
  2290 ;;  counter         1    5[BANK0 ] unsigned char 
  2291 ;; Return value:  Size  Location     Type
  2292 ;;                  2    0[BANK0 ] unsigned int 
  2293 ;; Registers used:
  2294 ;;		wreg, status,2, status,0
  2295 ;; Tracked objects:
  2296 ;;		On entry : 0/0
  2297 ;;		On exit  : 0/0
  2298 ;;		Unchanged: 0/0
  2299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2300 ;;      Params:         0       4       0       0       0
  2301 ;;      Locals:         0       1       0       0       0
  2302 ;;      Temps:          0       1       0       0       0
  2303 ;;      Totals:         0       6       0       0       0
  2304 ;;Total ram usage:        6 bytes
  2305 ;; Hardware stack levels used:    1
  2306 ;; Hardware stack levels required when called:    2
  2307 ;; This function calls:
  2308 ;;		Nothing
  2309 ;; This function is called by:
  2310 ;;		_utoa
  2311 ;; This function uses a non-reentrant model
  2312 ;;
  2313                           
  2314                           
  2315                           ;psect for function ___lwmod
  2316  07A3                     ___lwmod:
  2317  07A3                     l1717:	
  2318                           ;incstack = 0
  2319                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2320                           
  2321  07A3  1283               	bcf	3,5	;RP0=0, select bank0
  2322  07A4  1303               	bcf	3,6	;RP1=0, select bank0
  2323  07A5  0820               	movf	___lwmod@divisor,w
  2324  07A6  0421               	iorwf	___lwmod@divisor+1,w
  2325  07A7  1903               	btfsc	3,2
  2326  07A8  2FAA               	goto	u711
  2327  07A9  2FAB               	goto	u710
  2328  07AA                     u711:
  2329  07AA  2FDA               	goto	l1735
  2330  07AB                     u710:
  2331  07AB                     l1719:
  2332  07AB  01A5               	clrf	___lwmod@counter
  2333  07AC  0AA5               	incf	___lwmod@counter,f
  2334  07AD  2FB9               	goto	l1725
  2335  07AE                     l1721:
  2336  07AE  3001               	movlw	1
  2337  07AF                     u725:
  2338  07AF  1003               	clrc
  2339  07B0  0DA0               	rlf	___lwmod@divisor,f
  2340  07B1  0DA1               	rlf	___lwmod@divisor+1,f
  2341  07B2  3EFF               	addlw	-1
  2342  07B3  1D03               	skipz
  2343  07B4  2FAF               	goto	u725
  2344  07B5                     l1723:
  2345  07B5  3001               	movlw	1
  2346  07B6  00A4               	movwf	??___lwmod
  2347  07B7  0824               	movf	??___lwmod,w
  2348  07B8  07A5               	addwf	___lwmod@counter,f
  2349  07B9                     l1725:
  2350  07B9  1FA1               	btfss	___lwmod@divisor+1,7
  2351  07BA  2FBC               	goto	u731
  2352  07BB  2FBD               	goto	u730
  2353  07BC                     u731:
  2354  07BC  2FAE               	goto	l1721
  2355  07BD                     u730:
  2356  07BD                     l1727:
  2357  07BD  0821               	movf	___lwmod@divisor+1,w
  2358  07BE  0223               	subwf	___lwmod@dividend+1,w
  2359  07BF  1D03               	skipz
  2360  07C0  2FC3               	goto	u745
  2361  07C1  0820               	movf	___lwmod@divisor,w
  2362  07C2  0222               	subwf	___lwmod@dividend,w
  2363  07C3                     u745:
  2364  07C3  1C03               	skipc
  2365  07C4  2FC6               	goto	u741
  2366  07C5  2FC7               	goto	u740
  2367  07C6                     u741:
  2368  07C6  2FCD               	goto	l1731
  2369  07C7                     u740:
  2370  07C7                     l1729:
  2371  07C7  0820               	movf	___lwmod@divisor,w
  2372  07C8  02A2               	subwf	___lwmod@dividend,f
  2373  07C9  0821               	movf	___lwmod@divisor+1,w
  2374  07CA  1C03               	skipc
  2375  07CB  03A3               	decf	___lwmod@dividend+1,f
  2376  07CC  02A3               	subwf	___lwmod@dividend+1,f
  2377  07CD                     l1731:
  2378  07CD  3001               	movlw	1
  2379  07CE                     u755:
  2380  07CE  1003               	clrc
  2381  07CF  0CA1               	rrf	___lwmod@divisor+1,f
  2382  07D0  0CA0               	rrf	___lwmod@divisor,f
  2383  07D1  3EFF               	addlw	-1
  2384  07D2  1D03               	skipz
  2385  07D3  2FCE               	goto	u755
  2386  07D4                     l1733:
  2387  07D4  3001               	movlw	1
  2388  07D5  02A5               	subwf	___lwmod@counter,f
  2389  07D6  1D03               	btfss	3,2
  2390  07D7  2FD9               	goto	u761
  2391  07D8  2FDA               	goto	u760
  2392  07D9                     u761:
  2393  07D9  2FBD               	goto	l1727
  2394  07DA                     u760:
  2395  07DA                     l1735:
  2396  07DA  0823               	movf	___lwmod@dividend+1,w
  2397  07DB  00A1               	movwf	?___lwmod+1
  2398  07DC  0822               	movf	___lwmod@dividend,w
  2399  07DD  00A0               	movwf	?___lwmod
  2400  07DE                     l629:
  2401  07DE  0008               	return
  2402  07DF                     __end_of___lwmod:
  2403                           
  2404                           	psect	text8
  2405  075D                     __ptext8:	
  2406 ;; *************** function ___lwdiv *****************
  2407 ;; Defined at:
  2408 ;;		line 5 in file "D:\machorrin\Programas\mplab\pic\sources\c90\common\lwdiv.c"
  2409 ;; Parameters:    Size  Location     Type
  2410 ;;  divisor         2    0[BANK0 ] unsigned int 
  2411 ;;  dividend        2    2[BANK0 ] unsigned int 
  2412 ;; Auto vars:     Size  Location     Type
  2413 ;;  quotient        2    5[BANK0 ] unsigned int 
  2414 ;;  counter         1    7[BANK0 ] unsigned char 
  2415 ;; Return value:  Size  Location     Type
  2416 ;;                  2    0[BANK0 ] unsigned int 
  2417 ;; Registers used:
  2418 ;;		wreg, status,2, status,0
  2419 ;; Tracked objects:
  2420 ;;		On entry : 0/0
  2421 ;;		On exit  : 0/0
  2422 ;;		Unchanged: 0/0
  2423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2424 ;;      Params:         0       4       0       0       0
  2425 ;;      Locals:         0       3       0       0       0
  2426 ;;      Temps:          0       1       0       0       0
  2427 ;;      Totals:         0       8       0       0       0
  2428 ;;Total ram usage:        8 bytes
  2429 ;; Hardware stack levels used:    1
  2430 ;; Hardware stack levels required when called:    2
  2431 ;; This function calls:
  2432 ;;		Nothing
  2433 ;; This function is called by:
  2434 ;;		_utoa
  2435 ;; This function uses a non-reentrant model
  2436 ;;
  2437                           
  2438                           
  2439                           ;psect for function ___lwdiv
  2440  075D                     ___lwdiv:
  2441  075D                     l1691:	
  2442                           ;incstack = 0
  2443                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2444                           
  2445  075D  1283               	bcf	3,5	;RP0=0, select bank0
  2446  075E  1303               	bcf	3,6	;RP1=0, select bank0
  2447  075F  01A5               	clrf	___lwdiv@quotient
  2448  0760  01A6               	clrf	___lwdiv@quotient+1
  2449  0761                     l1693:
  2450  0761  0820               	movf	___lwdiv@divisor,w
  2451  0762  0421               	iorwf	___lwdiv@divisor+1,w
  2452  0763  1903               	btfsc	3,2
  2453  0764  2F66               	goto	u641
  2454  0765  2F67               	goto	u640
  2455  0766                     u641:
  2456  0766  2F9E               	goto	l1713
  2457  0767                     u640:
  2458  0767                     l1695:
  2459  0767  01A7               	clrf	___lwdiv@counter
  2460  0768  0AA7               	incf	___lwdiv@counter,f
  2461  0769  2F75               	goto	l1701
  2462  076A                     l1697:
  2463  076A  3001               	movlw	1
  2464  076B                     u655:
  2465  076B  1003               	clrc
  2466  076C  0DA0               	rlf	___lwdiv@divisor,f
  2467  076D  0DA1               	rlf	___lwdiv@divisor+1,f
  2468  076E  3EFF               	addlw	-1
  2469  076F  1D03               	skipz
  2470  0770  2F6B               	goto	u655
  2471  0771                     l1699:
  2472  0771  3001               	movlw	1
  2473  0772  00A4               	movwf	??___lwdiv
  2474  0773  0824               	movf	??___lwdiv,w
  2475  0774  07A7               	addwf	___lwdiv@counter,f
  2476  0775                     l1701:
  2477  0775  1FA1               	btfss	___lwdiv@divisor+1,7
  2478  0776  2F78               	goto	u661
  2479  0777  2F79               	goto	u660
  2480  0778                     u661:
  2481  0778  2F6A               	goto	l1697
  2482  0779                     u660:
  2483  0779                     l1703:
  2484  0779  3001               	movlw	1
  2485  077A                     u675:
  2486  077A  1003               	clrc
  2487  077B  0DA5               	rlf	___lwdiv@quotient,f
  2488  077C  0DA6               	rlf	___lwdiv@quotient+1,f
  2489  077D  3EFF               	addlw	-1
  2490  077E  1D03               	skipz
  2491  077F  2F7A               	goto	u675
  2492  0780  0821               	movf	___lwdiv@divisor+1,w
  2493  0781  0223               	subwf	___lwdiv@dividend+1,w
  2494  0782  1D03               	skipz
  2495  0783  2F86               	goto	u685
  2496  0784  0820               	movf	___lwdiv@divisor,w
  2497  0785  0222               	subwf	___lwdiv@dividend,w
  2498  0786                     u685:
  2499  0786  1C03               	skipc
  2500  0787  2F89               	goto	u681
  2501  0788  2F8A               	goto	u680
  2502  0789                     u681:
  2503  0789  2F91               	goto	l1709
  2504  078A                     u680:
  2505  078A                     l1705:
  2506  078A  0820               	movf	___lwdiv@divisor,w
  2507  078B  02A2               	subwf	___lwdiv@dividend,f
  2508  078C  0821               	movf	___lwdiv@divisor+1,w
  2509  078D  1C03               	skipc
  2510  078E  03A3               	decf	___lwdiv@dividend+1,f
  2511  078F  02A3               	subwf	___lwdiv@dividend+1,f
  2512  0790                     l1707:
  2513  0790  1425               	bsf	___lwdiv@quotient,0
  2514  0791                     l1709:
  2515  0791  3001               	movlw	1
  2516  0792                     u695:
  2517  0792  1003               	clrc
  2518  0793  0CA1               	rrf	___lwdiv@divisor+1,f
  2519  0794  0CA0               	rrf	___lwdiv@divisor,f
  2520  0795  3EFF               	addlw	-1
  2521  0796  1D03               	skipz
  2522  0797  2F92               	goto	u695
  2523  0798                     l1711:
  2524  0798  3001               	movlw	1
  2525  0799  02A7               	subwf	___lwdiv@counter,f
  2526  079A  1D03               	btfss	3,2
  2527  079B  2F9D               	goto	u701
  2528  079C  2F9E               	goto	u700
  2529  079D                     u701:
  2530  079D  2F79               	goto	l1703
  2531  079E                     u700:
  2532  079E                     l1713:
  2533  079E  0826               	movf	___lwdiv@quotient+1,w
  2534  079F  00A1               	movwf	?___lwdiv+1
  2535  07A0  0825               	movf	___lwdiv@quotient,w
  2536  07A1  00A0               	movwf	?___lwdiv
  2537  07A2                     l619:
  2538  07A2  0008               	return
  2539  07A3                     __end_of___lwdiv:
  2540                           
  2541                           	psect	text9
  2542  0442                     __ptext9:	
  2543 ;; *************** function _moonwalk *****************
  2544 ;; Defined at:
  2545 ;;		line 347 in file "machorrobot.c"
  2546 ;; Parameters:    Size  Location     Type
  2547 ;;		None
  2548 ;; Auto vars:     Size  Location     Type
  2549 ;;  i               1   11[BANK0 ] unsigned char 
  2550 ;;  i               1   10[BANK0 ] unsigned char 
  2551 ;;  i               1    9[BANK0 ] unsigned char 
  2552 ;;  i               1    8[BANK0 ] unsigned char 
  2553 ;; Return value:  Size  Location     Type
  2554 ;;                  1    wreg      void 
  2555 ;; Registers used:
  2556 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2557 ;; Tracked objects:
  2558 ;;		On entry : 0/0
  2559 ;;		On exit  : 0/0
  2560 ;;		Unchanged: 0/0
  2561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2562 ;;      Params:         0       0       0       0       0
  2563 ;;      Locals:         0       4       0       0       0
  2564 ;;      Temps:          0       2       0       0       0
  2565 ;;      Totals:         0       6       0       0       0
  2566 ;;Total ram usage:        6 bytes
  2567 ;; Hardware stack levels used:    1
  2568 ;; Hardware stack levels required when called:    4
  2569 ;; This function calls:
  2570 ;;		_moveCCPservo
  2571 ;; This function is called by:
  2572 ;;		_main
  2573 ;; This function uses a non-reentrant model
  2574 ;;
  2575                           
  2576                           
  2577                           ;psect for function _moonwalk
  2578  0442                     _moonwalk:
  2579  0442                     l2029:	
  2580                           ;incstack = 0
  2581                           ; Regs used in _moonwalk: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2582                           
  2583                           
  2584                           ;machorrobot.c: 348:     PORTBbits.RB6 = 1;
  2585  0442  1283               	bcf	3,5	;RP0=0, select bank0
  2586  0443  1303               	bcf	3,6	;RP1=0, select bank0
  2587  0444  1706               	bsf	6,6	;volatile
  2588  0445                     l2031:
  2589                           
  2590                           ;machorrobot.c: 350:     moveCCPservo(70,1);
  2591  0445  01A1               	clrf	moveCCPservo@servo
  2592  0446  0AA1               	incf	moveCCPservo@servo,f
  2593  0447  3046               	movlw	70
  2594  0448  120A  158A  278D  120A  118A  	fcall	_moveCCPservo
  2595                           
  2596                           ;machorrobot.c: 351:     moveCCPservo(70,2);
  2597  044D  3002               	movlw	2
  2598  044E  1283               	bcf	3,5	;RP0=0, select bank0
  2599  044F  1303               	bcf	3,6	;RP1=0, select bank0
  2600  0450  00A6               	movwf	??_moonwalk
  2601  0451  0826               	movf	??_moonwalk,w
  2602  0452  00A1               	movwf	moveCCPservo@servo
  2603  0453  3046               	movlw	70
  2604  0454  120A  158A  278D  120A  118A  	fcall	_moveCCPservo
  2605  0459                     l2033:
  2606                           
  2607                           ;machorrobot.c: 353:     angulos[3]= 64;
  2608  0459  3040               	movlw	64
  2609  045A  1283               	bcf	3,5	;RP0=0, select bank0
  2610  045B  1303               	bcf	3,6	;RP1=0, select bank0
  2611  045C  00A6               	movwf	??_moonwalk
  2612  045D  0826               	movf	??_moonwalk,w
  2613  045E  00FB               	movwf	_angulos+3	;volatile
  2614  045F                     l2035:
  2615                           
  2616                           ;machorrobot.c: 354:     angulos[2]= 64;
  2617  045F  3040               	movlw	64
  2618  0460  00A6               	movwf	??_moonwalk
  2619  0461  0826               	movf	??_moonwalk,w
  2620  0462  00FA               	movwf	_angulos+2	;volatile
  2621  0463                     l2037:
  2622                           
  2623                           ;machorrobot.c: 356:     for (char i = 64; i > 31; i--){
  2624  0463  3040               	movlw	64
  2625  0464  00A6               	movwf	??_moonwalk
  2626  0465  0826               	movf	??_moonwalk,w
  2627  0466  00A8               	movwf	moonwalk@i
  2628  0467                     l2043:
  2629                           
  2630                           ;machorrobot.c: 357:         angulos[0] = i;
  2631  0467  0828               	movf	moonwalk@i,w
  2632  0468  00A6               	movwf	??_moonwalk
  2633  0469  0826               	movf	??_moonwalk,w
  2634  046A  00F8               	movwf	_angulos	;volatile
  2635                           
  2636                           ;machorrobot.c: 358:         _delay((unsigned long)((10)*(4000000/4000.0)));
  2637  046B  300D               	movlw	13
  2638  046C  1283               	bcf	3,5	;RP0=0, select bank0
  2639  046D  1303               	bcf	3,6	;RP1=0, select bank0
  2640  046E  00A7               	movwf	??_moonwalk+1
  2641  046F  30FB               	movlw	251
  2642  0470  00A6               	movwf	??_moonwalk
  2643  0471                     u1277:
  2644  0471  0BA6               	decfsz	??_moonwalk,f
  2645  0472  2C71               	goto	u1277
  2646  0473  0BA7               	decfsz	??_moonwalk+1,f
  2647  0474  2C71               	goto	u1277
  2648  0475                     l2045:
  2649                           
  2650                           ;machorrobot.c: 359:     }
  2651  0475  3001               	movlw	1
  2652  0476  1283               	bcf	3,5	;RP0=0, select bank0
  2653  0477  1303               	bcf	3,6	;RP1=0, select bank0
  2654  0478  02A8               	subwf	moonwalk@i,f
  2655  0479                     l2047:
  2656  0479  3020               	movlw	32
  2657  047A  0228               	subwf	moonwalk@i,w
  2658  047B  1803               	skipnc
  2659  047C  2C7E               	goto	u1041
  2660  047D  2C7F               	goto	u1040
  2661  047E                     u1041:
  2662  047E  2C67               	goto	l2043
  2663  047F                     u1040:
  2664  047F                     l2049:
  2665                           
  2666                           ;machorrobot.c: 360:     for (char i = 64; i<95; i++){
  2667  047F  3040               	movlw	64
  2668  0480  00A6               	movwf	??_moonwalk
  2669  0481  0826               	movf	??_moonwalk,w
  2670  0482  00A9               	movwf	moonwalk@i_736
  2671  0483                     l2053:
  2672                           
  2673                           ;machorrobot.c: 361:        angulos[1] = i;
  2674  0483  0829               	movf	moonwalk@i_736,w
  2675  0484  00A6               	movwf	??_moonwalk
  2676  0485  0826               	movf	??_moonwalk,w
  2677  0486  00F9               	movwf	_angulos+1	;volatile
  2678                           
  2679                           ;machorrobot.c: 362:         _delay((unsigned long)((10)*(4000000/4000.0)));
  2680  0487  300D               	movlw	13
  2681  0488  1283               	bcf	3,5	;RP0=0, select bank0
  2682  0489  1303               	bcf	3,6	;RP1=0, select bank0
  2683  048A  00A7               	movwf	??_moonwalk+1
  2684  048B  30FB               	movlw	251
  2685  048C  00A6               	movwf	??_moonwalk
  2686  048D                     u1287:
  2687  048D  0BA6               	decfsz	??_moonwalk,f
  2688  048E  2C8D               	goto	u1287
  2689  048F  0BA7               	decfsz	??_moonwalk+1,f
  2690  0490  2C8D               	goto	u1287
  2691  0491                     l2055:
  2692                           
  2693                           ;machorrobot.c: 363:     }
  2694  0491  3001               	movlw	1
  2695  0492  1283               	bcf	3,5	;RP0=0, select bank0
  2696  0493  1303               	bcf	3,6	;RP1=0, select bank0
  2697  0494  00A6               	movwf	??_moonwalk
  2698  0495  0826               	movf	??_moonwalk,w
  2699  0496  07A9               	addwf	moonwalk@i_736,f
  2700  0497                     l2057:
  2701  0497  305F               	movlw	95
  2702  0498  0229               	subwf	moonwalk@i_736,w
  2703  0499  1C03               	skipc
  2704  049A  2C9C               	goto	u1051
  2705  049B  2C9D               	goto	u1050
  2706  049C                     u1051:
  2707  049C  2C83               	goto	l2053
  2708  049D                     u1050:
  2709  049D                     l2059:
  2710                           
  2711                           ;machorrobot.c: 364:     for (char i = 31; i <64; i++){
  2712  049D  301F               	movlw	31
  2713  049E  00A6               	movwf	??_moonwalk
  2714  049F  0826               	movf	??_moonwalk,w
  2715  04A0  00AA               	movwf	moonwalk@i_737
  2716  04A1                     l2063:
  2717                           
  2718                           ;machorrobot.c: 365:         angulos[0] = i;
  2719  04A1  082A               	movf	moonwalk@i_737,w
  2720  04A2  00A6               	movwf	??_moonwalk
  2721  04A3  0826               	movf	??_moonwalk,w
  2722  04A4  00F8               	movwf	_angulos	;volatile
  2723                           
  2724                           ;machorrobot.c: 366:         _delay((unsigned long)((10)*(4000000/4000.0)));
  2725  04A5  300D               	movlw	13
  2726  04A6  1283               	bcf	3,5	;RP0=0, select bank0
  2727  04A7  1303               	bcf	3,6	;RP1=0, select bank0
  2728  04A8  00A7               	movwf	??_moonwalk+1
  2729  04A9  30FB               	movlw	251
  2730  04AA  00A6               	movwf	??_moonwalk
  2731  04AB                     u1297:
  2732  04AB  0BA6               	decfsz	??_moonwalk,f
  2733  04AC  2CAB               	goto	u1297
  2734  04AD  0BA7               	decfsz	??_moonwalk+1,f
  2735  04AE  2CAB               	goto	u1297
  2736  04AF                     l2065:
  2737                           
  2738                           ;machorrobot.c: 367:     }
  2739  04AF  3001               	movlw	1
  2740  04B0  1283               	bcf	3,5	;RP0=0, select bank0
  2741  04B1  1303               	bcf	3,6	;RP1=0, select bank0
  2742  04B2  00A6               	movwf	??_moonwalk
  2743  04B3  0826               	movf	??_moonwalk,w
  2744  04B4  07AA               	addwf	moonwalk@i_737,f
  2745  04B5                     l2067:
  2746  04B5  3040               	movlw	64
  2747  04B6  022A               	subwf	moonwalk@i_737,w
  2748  04B7  1C03               	skipc
  2749  04B8  2CBA               	goto	u1061
  2750  04B9  2CBB               	goto	u1060
  2751  04BA                     u1061:
  2752  04BA  2CA1               	goto	l2063
  2753  04BB                     u1060:
  2754  04BB                     l2069:
  2755                           
  2756                           ;machorrobot.c: 368:     for (char i = 95; i >64; i--){
  2757  04BB  305F               	movlw	95
  2758  04BC  00A6               	movwf	??_moonwalk
  2759  04BD  0826               	movf	??_moonwalk,w
  2760  04BE  00AB               	movwf	moonwalk@i_738
  2761  04BF                     l2073:
  2762                           
  2763                           ;machorrobot.c: 369:         angulos[1] = i;
  2764  04BF  082B               	movf	moonwalk@i_738,w
  2765  04C0  00A6               	movwf	??_moonwalk
  2766  04C1  0826               	movf	??_moonwalk,w
  2767  04C2  00F9               	movwf	_angulos+1	;volatile
  2768                           
  2769                           ;machorrobot.c: 370:         _delay((unsigned long)((10)*(4000000/4000.0)));
  2770  04C3  300D               	movlw	13
  2771  04C4  1283               	bcf	3,5	;RP0=0, select bank0
  2772  04C5  1303               	bcf	3,6	;RP1=0, select bank0
  2773  04C6  00A7               	movwf	??_moonwalk+1
  2774  04C7  30FB               	movlw	251
  2775  04C8  00A6               	movwf	??_moonwalk
  2776  04C9                     u1307:
  2777  04C9  0BA6               	decfsz	??_moonwalk,f
  2778  04CA  2CC9               	goto	u1307
  2779  04CB  0BA7               	decfsz	??_moonwalk+1,f
  2780  04CC  2CC9               	goto	u1307
  2781  04CD                     l2075:
  2782                           
  2783                           ;machorrobot.c: 371:     }
  2784  04CD  3001               	movlw	1
  2785  04CE  1283               	bcf	3,5	;RP0=0, select bank0
  2786  04CF  1303               	bcf	3,6	;RP1=0, select bank0
  2787  04D0  02AB               	subwf	moonwalk@i_738,f
  2788  04D1                     l2077:
  2789  04D1  3041               	movlw	65
  2790  04D2  022B               	subwf	moonwalk@i_738,w
  2791  04D3  1803               	skipnc
  2792  04D4  2CD6               	goto	u1071
  2793  04D5  2CD7               	goto	u1070
  2794  04D6                     u1071:
  2795  04D6  2CBF               	goto	l2073
  2796  04D7                     u1070:
  2797  04D7                     l209:
  2798  04D7  0008               	return
  2799  04D8                     __end_of_moonwalk:
  2800                           
  2801                           	psect	text10
  2802  0F67                     __ptext10:	
  2803 ;; *************** function _initUart *****************
  2804 ;; Defined at:
  2805 ;;		line 425 in file "machorrobot.c"
  2806 ;; Parameters:    Size  Location     Type
  2807 ;;		None
  2808 ;; Auto vars:     Size  Location     Type
  2809 ;;		None
  2810 ;; Return value:  Size  Location     Type
  2811 ;;                  1    wreg      void 
  2812 ;; Registers used:
  2813 ;;		wreg
  2814 ;; Tracked objects:
  2815 ;;		On entry : 0/0
  2816 ;;		On exit  : 0/0
  2817 ;;		Unchanged: 0/0
  2818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2819 ;;      Params:         0       0       0       0       0
  2820 ;;      Locals:         0       0       0       0       0
  2821 ;;      Temps:          0       0       0       0       0
  2822 ;;      Totals:         0       0       0       0       0
  2823 ;;Total ram usage:        0 bytes
  2824 ;; Hardware stack levels used:    1
  2825 ;; Hardware stack levels required when called:    2
  2826 ;; This function calls:
  2827 ;;		Nothing
  2828 ;; This function is called by:
  2829 ;;		_main
  2830 ;; This function uses a non-reentrant model
  2831 ;;
  2832                           
  2833                           
  2834                           ;psect for function _initUart
  2835  0F67                     _initUart:
  2836  0F67                     l1903:	
  2837                           ;incstack = 0
  2838                           ; Regs used in _initUart: [wreg]
  2839                           
  2840                           
  2841                           ;machorrobot.c: 427:     TXSTAbits.TX9 = 0;
  2842  0F67  1683               	bsf	3,5	;RP0=1, select bank1
  2843  0F68  1303               	bcf	3,6	;RP1=0, select bank1
  2844  0F69  1318               	bcf	24,6	;volatile
  2845                           
  2846                           ;machorrobot.c: 428:     TXSTAbits.TXEN = 1;
  2847  0F6A  1698               	bsf	24,5	;volatile
  2848                           
  2849                           ;machorrobot.c: 429:     TXSTAbits.SYNC = 0;
  2850  0F6B  1218               	bcf	24,4	;volatile
  2851                           
  2852                           ;machorrobot.c: 431:     TXSTAbits.BRGH = 1;
  2853  0F6C  1518               	bsf	24,2	;volatile
  2854                           
  2855                           ;machorrobot.c: 433:     RCSTAbits.SPEN = 1;
  2856  0F6D  1283               	bcf	3,5	;RP0=0, select bank0
  2857  0F6E  1303               	bcf	3,6	;RP1=0, select bank0
  2858  0F6F  1798               	bsf	24,7	;volatile
  2859                           
  2860                           ;machorrobot.c: 434:     RCSTAbits.RX9 = 0 ;
  2861  0F70  1318               	bcf	24,6	;volatile
  2862                           
  2863                           ;machorrobot.c: 435:     RCSTAbits.CREN = 1;
  2864  0F71  1618               	bsf	24,4	;volatile
  2865  0F72                     l1905:
  2866                           
  2867                           ;machorrobot.c: 440:     SPBRG = 12;
  2868  0F72  300C               	movlw	12
  2869  0F73  1683               	bsf	3,5	;RP0=1, select bank1
  2870  0F74  1303               	bcf	3,6	;RP1=0, select bank1
  2871  0F75  0099               	movwf	25	;volatile
  2872  0F76                     l1907:
  2873                           
  2874                           ;machorrobot.c: 442:     PIE1bits.RCIE = 1;
  2875  0F76  168C               	bsf	12,5	;volatile
  2876  0F77                     l1909:
  2877                           
  2878                           ;machorrobot.c: 444:     INTCONbits.PEIE = 1;
  2879  0F77  170B               	bsf	11,6	;volatile
  2880  0F78                     l217:
  2881  0F78  0008               	return
  2882  0F79                     __end_of_initUart:
  2883                           
  2884                           	psect	text11
  2885  055B                     __ptext11:	
  2886 ;; *************** function _ejecutarComando *****************
  2887 ;; Defined at:
  2888 ;;		line 462 in file "machorrobot.c"
  2889 ;; Parameters:    Size  Location     Type
  2890 ;;		None
  2891 ;; Auto vars:     Size  Location     Type
  2892 ;;  numeros         2   16[BANK0 ] int 
  2893 ;; Return value:  Size  Location     Type
  2894 ;;                  1    wreg      void 
  2895 ;; Registers used:
  2896 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2897 ;; Tracked objects:
  2898 ;;		On entry : 0/0
  2899 ;;		On exit  : 0/0
  2900 ;;		Unchanged: 0/0
  2901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2902 ;;      Params:         0       0       0       0       0
  2903 ;;      Locals:         0       2       0       0       0
  2904 ;;      Temps:          0       2       0       0       0
  2905 ;;      Totals:         0       4       0       0       0
  2906 ;;Total ram usage:        4 bytes
  2907 ;; Hardware stack levels used:    1
  2908 ;; Hardware stack levels required when called:    4
  2909 ;; This function calls:
  2910 ;;		_SendChar
  2911 ;;		_SendString
  2912 ;;		_atoi
  2913 ;;		_moveCCPservo
  2914 ;; This function is called by:
  2915 ;;		_main
  2916 ;; This function uses a non-reentrant model
  2917 ;;
  2918                           
  2919                           
  2920                           ;psect for function _ejecutarComando
  2921  055B                     _ejecutarComando:
  2922  055B                     l2079:	
  2923                           ;incstack = 0
  2924                           ; Regs used in _ejecutarComando: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2925                           
  2926                           
  2927                           ;machorrobot.c: 464:     int numeros = atoi(numero);
  2928  055B  304A               	movlw	(low (_numero| 0))& (0+255)
  2929  055C  120A  118A  24D8  120A  118A  	fcall	_atoi
  2930  0561  1283               	bcf	3,5	;RP0=0, select bank0
  2931  0562  1303               	bcf	3,6	;RP1=0, select bank0
  2932  0563  0827               	movf	?_atoi+1,w
  2933  0564  00B1               	movwf	ejecutarComando@numeros+1
  2934  0565  0826               	movf	?_atoi,w
  2935  0566  00B0               	movwf	ejecutarComando@numeros
  2936  0567                     l2081:
  2937                           
  2938                           ;machorrobot.c: 467:     PORTBbits.RB7 = ~PORTBbits.RB7;
  2939  0567  1003               	clrc
  2940  0568  1F86               	btfss	6,7	;volatile
  2941  0569  1403               	setc
  2942  056A  1803               	btfsc	3,0
  2943  056B  2D6D               	goto	u1081
  2944  056C  2D71               	goto	u1080
  2945  056D                     u1081:
  2946  056D  1283               	bcf	3,5	;RP0=0, select bank0
  2947  056E  1303               	bcf	3,6	;RP1=0, select bank0
  2948  056F  1786               	bsf	6,7	;volatile
  2949  0570  2D74               	goto	u1094
  2950  0571                     u1080:
  2951  0571  1283               	bcf	3,5	;RP0=0, select bank0
  2952  0572  1303               	bcf	3,6	;RP1=0, select bank0
  2953  0573  1386               	bcf	6,7	;volatile
  2954  0574                     u1094:
  2955  0574                     l2083:
  2956                           
  2957                           ;machorrobot.c: 468:     SendString(numero,4);
  2958  0574  304A               	movlw	(low (_numero| 0))& (0+255)
  2959  0575  00A1               	movwf	SendString@string
  2960  0576  3000               	movlw	0
  2961  0577  00A2               	movwf	SendString@string+1
  2962  0578  3004               	movlw	4
  2963  0579  00AE               	movwf	??_ejecutarComando
  2964  057A  082E               	movf	??_ejecutarComando,w
  2965  057B  00A3               	movwf	SendString@largo
  2966  057C  120A  118A  26C0  120A  118A  	fcall	_SendString
  2967  0581                     l2085:
  2968                           
  2969                           ;machorrobot.c: 469:     SendChar('\n');
  2970  0581  300A               	movlw	10
  2971  0582  120A  158A  274A  120A  118A  	fcall	_SendChar
  2972  0587                     l2087:
  2973                           
  2974                           ;machorrobot.c: 470:     numero[0] = ' ';
  2975  0587  3020               	movlw	32
  2976  0588  1283               	bcf	3,5	;RP0=0, select bank0
  2977  0589  1303               	bcf	3,6	;RP1=0, select bank0
  2978  058A  00AE               	movwf	??_ejecutarComando
  2979  058B  082E               	movf	??_ejecutarComando,w
  2980  058C  00CA               	movwf	_numero	;volatile
  2981  058D                     l2089:
  2982                           
  2983                           ;machorrobot.c: 471:     numero[1] = ' ';
  2984  058D  3020               	movlw	32
  2985  058E  00AE               	movwf	??_ejecutarComando
  2986  058F  082E               	movf	??_ejecutarComando,w
  2987  0590  00CB               	movwf	_numero+1	;volatile
  2988  0591                     l2091:
  2989                           
  2990                           ;machorrobot.c: 472:     numero[2] = ' ';
  2991  0591  3020               	movlw	32
  2992  0592  00AE               	movwf	??_ejecutarComando
  2993  0593  082E               	movf	??_ejecutarComando,w
  2994  0594  00CC               	movwf	_numero+2	;volatile
  2995  0595                     l2093:
  2996                           
  2997                           ;machorrobot.c: 473:     numero[3] = '\0';
  2998  0595  01CD               	clrf	_numero+3	;volatile
  2999                           
  3000                           ;machorrobot.c: 474:     switch(comando){
  3001  0596  2DBF               	goto	l2109
  3002  0597                     l2095:
  3003                           
  3004                           ;machorrobot.c: 476:             angulos[0] = numeros;
  3005  0597  0830               	movf	ejecutarComando@numeros,w
  3006  0598  00AE               	movwf	??_ejecutarComando
  3007  0599  082E               	movf	??_ejecutarComando,w
  3008  059A  00F8               	movwf	_angulos	;volatile
  3009                           
  3010                           ;machorrobot.c: 477:             break;
  3011  059B  2DDB               	goto	l242
  3012  059C                     l2097:
  3013                           
  3014                           ;machorrobot.c: 479:             angulos[1] = numeros;
  3015  059C  0830               	movf	ejecutarComando@numeros,w
  3016  059D  00AE               	movwf	??_ejecutarComando
  3017  059E  082E               	movf	??_ejecutarComando,w
  3018  059F  00F9               	movwf	_angulos+1	;volatile
  3019                           
  3020                           ;machorrobot.c: 480:             break;
  3021  05A0  2DDB               	goto	l242
  3022  05A1                     l2099:
  3023                           
  3024                           ;machorrobot.c: 482:             moveCCPservo(numeros,1);
  3025  05A1  01A1               	clrf	moveCCPservo@servo
  3026  05A2  0AA1               	incf	moveCCPservo@servo,f
  3027  05A3  0830               	movf	ejecutarComando@numeros,w
  3028  05A4  120A  158A  278D  120A  118A  	fcall	_moveCCPservo
  3029                           
  3030                           ;machorrobot.c: 483:             break;
  3031  05A9  2DDB               	goto	l242
  3032  05AA                     l2101:
  3033                           
  3034                           ;machorrobot.c: 485:             moveCCPservo(numeros,2);
  3035  05AA  3002               	movlw	2
  3036  05AB  00AE               	movwf	??_ejecutarComando
  3037  05AC  082E               	movf	??_ejecutarComando,w
  3038  05AD  00A1               	movwf	moveCCPservo@servo
  3039  05AE  0830               	movf	ejecutarComando@numeros,w
  3040  05AF  120A  158A  278D  120A  118A  	fcall	_moveCCPservo
  3041                           
  3042                           ;machorrobot.c: 486:             break;
  3043  05B4  2DDB               	goto	l242
  3044  05B5                     l2103:
  3045                           
  3046                           ;machorrobot.c: 488:             angulos[2] = numeros;
  3047  05B5  0830               	movf	ejecutarComando@numeros,w
  3048  05B6  00AE               	movwf	??_ejecutarComando
  3049  05B7  082E               	movf	??_ejecutarComando,w
  3050  05B8  00FA               	movwf	_angulos+2	;volatile
  3051                           
  3052                           ;machorrobot.c: 489:             break;
  3053  05B9  2DDB               	goto	l242
  3054  05BA                     l2105:
  3055                           
  3056                           ;machorrobot.c: 491:             angulos[3] = numeros;
  3057  05BA  0830               	movf	ejecutarComando@numeros,w
  3058  05BB  00AE               	movwf	??_ejecutarComando
  3059  05BC  082E               	movf	??_ejecutarComando,w
  3060  05BD  00FB               	movwf	_angulos+3	;volatile
  3061                           
  3062                           ;machorrobot.c: 492:             break;
  3063  05BE  2DDB               	goto	l242
  3064  05BF                     l2109:
  3065  05BF  0840               	movf	_comando,w	;volatile
  3066  05C0  00AE               	movwf	??_ejecutarComando
  3067  05C1  01AF               	clrf	??_ejecutarComando+1
  3068                           
  3069                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3070                           ; Switch size 1, requested type "simple"
  3071                           ; Number of cases is 1, Range of values is 0 to 0
  3072                           ; switch strategies available:
  3073                           ; Name         Instructions Cycles
  3074                           ; simple_byte            4     3 (average)
  3075                           ; direct_byte           11     8 (fixed)
  3076                           ; jumptable            260     6 (fixed)
  3077                           ;	Chosen strategy is simple_byte
  3078  05C2  082F               	movf	??_ejecutarComando+1,w
  3079  05C3  3A00               	xorlw	0	; case 0
  3080  05C4  1903               	skipnz
  3081  05C5  2DC7               	goto	l2485
  3082  05C6  2DDB               	goto	l242
  3083  05C7                     l2485:
  3084                           
  3085                           ; Switch size 1, requested type "simple"
  3086                           ; Number of cases is 6, Range of values is 65 to 70
  3087                           ; switch strategies available:
  3088                           ; Name         Instructions Cycles
  3089                           ; simple_byte           19    10 (average)
  3090                           ; direct_byte           29    11 (fixed)
  3091                           ; jumptable            263     9 (fixed)
  3092                           ;	Chosen strategy is simple_byte
  3093  05C7  082E               	movf	??_ejecutarComando,w
  3094  05C8  3A41               	xorlw	65	; case 65
  3095  05C9  1903               	skipnz
  3096  05CA  2D97               	goto	l2095
  3097  05CB  3A03               	xorlw	3	; case 66
  3098  05CC  1903               	skipnz
  3099  05CD  2D9C               	goto	l2097
  3100  05CE  3A01               	xorlw	1	; case 67
  3101  05CF  1903               	skipnz
  3102  05D0  2DA1               	goto	l2099
  3103  05D1  3A07               	xorlw	7	; case 68
  3104  05D2  1903               	skipnz
  3105  05D3  2DAA               	goto	l2101
  3106  05D4  3A01               	xorlw	1	; case 69
  3107  05D5  1903               	skipnz
  3108  05D6  2DB5               	goto	l2103
  3109  05D7  3A03               	xorlw	3	; case 70
  3110  05D8  1903               	skipnz
  3111  05D9  2DBA               	goto	l2105
  3112  05DA  2DDB               	goto	l242
  3113  05DB                     l242:
  3114  05DB  0008               	return
  3115  05DC                     __end_of_ejecutarComando:
  3116                           
  3117                           	psect	text12
  3118  04D8                     __ptext12:	
  3119 ;; *************** function _atoi *****************
  3120 ;; Defined at:
  3121 ;;		line 5 in file "D:\machorrin\Programas\mplab\pic\sources\c90\common\atoi.c"
  3122 ;; Parameters:    Size  Location     Type
  3123 ;;  s               1    wreg     PTR const unsigned char 
  3124 ;;		 -> numero(4), 
  3125 ;; Auto vars:     Size  Location     Type
  3126 ;;  s               1   13[BANK0 ] PTR const unsigned char 
  3127 ;;		 -> numero(4), 
  3128 ;;  a               2   11[BANK0 ] int 
  3129 ;;  sign            1   10[BANK0 ] unsigned char 
  3130 ;; Return value:  Size  Location     Type
  3131 ;;                  2    6[BANK0 ] int 
  3132 ;; Registers used:
  3133 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3134 ;; Tracked objects:
  3135 ;;		On entry : 0/0
  3136 ;;		On exit  : 0/0
  3137 ;;		Unchanged: 0/0
  3138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3139 ;;      Params:         0       2       0       0       0
  3140 ;;      Locals:         0       4       0       0       0
  3141 ;;      Temps:          0       2       0       0       0
  3142 ;;      Totals:         0       8       0       0       0
  3143 ;;Total ram usage:        8 bytes
  3144 ;; Hardware stack levels used:    1
  3145 ;; Hardware stack levels required when called:    3
  3146 ;; This function calls:
  3147 ;;		___wmul
  3148 ;;		_isdigit
  3149 ;; This function is called by:
  3150 ;;		_ejecutarComando
  3151 ;; This function uses a non-reentrant model
  3152 ;;
  3153                           
  3154                           
  3155                           ;psect for function _atoi
  3156  04D8                     _atoi:
  3157                           
  3158                           ;incstack = 0
  3159                           ; Regs used in _atoi: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3160                           ;atoi@s stored from wreg
  3161  04D8  1283               	bcf	3,5	;RP0=0, select bank0
  3162  04D9  1303               	bcf	3,6	;RP1=0, select bank0
  3163  04DA  00AD               	movwf	atoi@s
  3164  04DB                     l1827:
  3165  04DB  2CE0               	goto	l1831
  3166  04DC                     l1829:
  3167  04DC  3001               	movlw	1
  3168  04DD  00A8               	movwf	??_atoi
  3169  04DE  0828               	movf	??_atoi,w
  3170  04DF  07AD               	addwf	atoi@s,f
  3171  04E0                     l1831:
  3172  04E0  082D               	movf	atoi@s,w
  3173  04E1  0084               	movwf	4
  3174  04E2  3020               	movlw	32
  3175  04E3  1383               	bcf	3,7	;select IRP bank0
  3176  04E4  0600               	xorwf	0,w
  3177  04E5  1903               	btfsc	3,2
  3178  04E6  2CE8               	goto	u911
  3179  04E7  2CE9               	goto	u910
  3180  04E8                     u911:
  3181  04E8  2CDC               	goto	l1829
  3182  04E9                     u910:
  3183  04E9                     l1833:
  3184  04E9  082D               	movf	atoi@s,w
  3185  04EA  0084               	movwf	4
  3186  04EB  3009               	movlw	9
  3187  04EC  0600               	xorwf	0,w
  3188  04ED  1903               	btfsc	3,2
  3189  04EE  2CF0               	goto	u921
  3190  04EF  2CF1               	goto	u920
  3191  04F0                     u921:
  3192  04F0  2CDC               	goto	l1829
  3193  04F1                     u920:
  3194  04F1                     l1835:
  3195  04F1  01AB               	clrf	atoi@a
  3196  04F2  01AC               	clrf	atoi@a+1
  3197  04F3  01AA               	clrf	atoi@sign
  3198  04F4                     l1837:
  3199  04F4  082D               	movf	atoi@s,w
  3200  04F5  0084               	movwf	4
  3201  04F6  302D               	movlw	45
  3202  04F7  0600               	xorwf	0,w
  3203  04F8  1D03               	btfss	3,2
  3204  04F9  2CFB               	goto	u931
  3205  04FA  2CFC               	goto	u930
  3206  04FB                     u931:
  3207  04FB  2D05               	goto	l1841
  3208  04FC                     u930:
  3209  04FC                     l1839:
  3210  04FC  3001               	movlw	1
  3211  04FD  00A8               	movwf	??_atoi
  3212  04FE  0828               	movf	??_atoi,w
  3213  04FF  07AA               	addwf	atoi@sign,f
  3214  0500  3001               	movlw	1
  3215  0501  00A8               	movwf	??_atoi
  3216  0502  0828               	movf	??_atoi,w
  3217  0503  07AD               	addwf	atoi@s,f
  3218  0504  2D37               	goto	l1849
  3219  0505                     l1841:
  3220  0505  082D               	movf	atoi@s,w
  3221  0506  0084               	movwf	4
  3222  0507  302B               	movlw	43
  3223  0508  0600               	xorwf	0,w
  3224  0509  1D03               	btfss	3,2
  3225  050A  2D0C               	goto	u941
  3226  050B  2D0D               	goto	u940
  3227  050C                     u941:
  3228  050C  2D37               	goto	l1849
  3229  050D                     u940:
  3230  050D                     l1843:
  3231  050D  3001               	movlw	1
  3232  050E  00A8               	movwf	??_atoi
  3233  050F  0828               	movf	??_atoi,w
  3234  0510  07AD               	addwf	atoi@s,f
  3235  0511  2D37               	goto	l1849
  3236  0512                     l1845:
  3237  0512  1283               	bcf	3,5	;RP0=0, select bank0
  3238  0513  1303               	bcf	3,6	;RP1=0, select bank0
  3239  0514  082D               	movf	atoi@s,w
  3240  0515  0084               	movwf	4
  3241  0516  082C               	movf	atoi@a+1,w
  3242  0517  00A1               	movwf	___wmul@multiplier+1
  3243  0518  082B               	movf	atoi@a,w
  3244  0519  00A0               	movwf	___wmul@multiplier
  3245  051A  300A               	movlw	10
  3246  051B  00A2               	movwf	___wmul@multiplicand
  3247  051C  3000               	movlw	0
  3248  051D  00A3               	movwf	___wmul@multiplicand+1
  3249  051E  120A  158A  27D9  120A  118A  	fcall	___wmul
  3250  0523  1383               	bcf	3,7	;select IRP bank0
  3251  0524  0800               	movf	0,w
  3252  0525  1283               	bcf	3,5	;RP0=0, select bank0
  3253  0526  1303               	bcf	3,6	;RP1=0, select bank0
  3254  0527  0720               	addwf	?___wmul,w
  3255  0528  00A8               	movwf	??_atoi
  3256  0529  3000               	movlw	0
  3257  052A  1803               	skipnc
  3258  052B  3001               	movlw	1
  3259  052C  0721               	addwf	?___wmul+1,w
  3260  052D  00A9               	movwf	??_atoi+1
  3261  052E  0828               	movf	??_atoi,w
  3262  052F  3ED0               	addlw	208
  3263  0530  00AB               	movwf	atoi@a
  3264  0531  0829               	movf	??_atoi+1,w
  3265  0532  1803               	skipnc
  3266  0533  3E01               	addlw	1
  3267  0534  3EFF               	addlw	255
  3268  0535  00AC               	movwf	atoi@a+1
  3269  0536  2D0D               	goto	l1843
  3270  0537                     l1849:
  3271  0537  082D               	movf	atoi@s,w
  3272  0538  0084               	movwf	4
  3273  0539  0800               	movf	0,w
  3274  053A  120A  158A  2779  120A  118A  	fcall	_isdigit
  3275  053F  1803               	btfsc	3,0
  3276  0540  2D42               	goto	u951
  3277  0541  2D43               	goto	u950
  3278  0542                     u951:
  3279  0542  2D12               	goto	l1845
  3280  0543                     u950:
  3281  0543                     l1851:
  3282  0543  1283               	bcf	3,5	;RP0=0, select bank0
  3283  0544  1303               	bcf	3,6	;RP1=0, select bank0
  3284  0545  082A               	movf	atoi@sign,w
  3285  0546  1903               	btfsc	3,2
  3286  0547  2D49               	goto	u961
  3287  0548  2D4A               	goto	u960
  3288  0549                     u961:
  3289  0549  2D56               	goto	l1857
  3290  054A                     u960:
  3291  054A                     l1853:
  3292  054A  092B               	comf	atoi@a,w
  3293  054B  00A8               	movwf	??_atoi
  3294  054C  092C               	comf	atoi@a+1,w
  3295  054D  00A9               	movwf	??_atoi+1
  3296  054E  0AA8               	incf	??_atoi,f
  3297  054F  1903               	skipnz
  3298  0550  0AA9               	incf	??_atoi+1,f
  3299  0551  0828               	movf	??_atoi,w
  3300  0552  00A6               	movwf	?_atoi
  3301  0553  0829               	movf	??_atoi+1,w
  3302  0554  00A7               	movwf	?_atoi+1
  3303  0555  2D5A               	goto	l810
  3304  0556                     l1857:
  3305  0556  082C               	movf	atoi@a+1,w
  3306  0557  00A7               	movwf	?_atoi+1
  3307  0558  082B               	movf	atoi@a,w
  3308  0559  00A6               	movwf	?_atoi
  3309  055A                     l810:
  3310  055A  0008               	return
  3311  055B                     __end_of_atoi:
  3312                           
  3313                           	psect	text13
  3314  0F79                     __ptext13:	
  3315 ;; *************** function _isdigit *****************
  3316 ;; Defined at:
  3317 ;;		line 8 in file "D:\machorrin\Programas\mplab\pic\sources\c90\common\isdigit.c"
  3318 ;; Parameters:    Size  Location     Type
  3319 ;;  c               1    wreg     unsigned char 
  3320 ;; Auto vars:     Size  Location     Type
  3321 ;;  c               1    1[BANK0 ] unsigned char 
  3322 ;; Return value:  Size  Location     Type
  3323 ;;		None               void
  3324 ;; Registers used:
  3325 ;;		wreg, status,2, status,0
  3326 ;; Tracked objects:
  3327 ;;		On entry : 0/0
  3328 ;;		On exit  : 0/0
  3329 ;;		Unchanged: 0/0
  3330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3331 ;;      Params:         0       0       0       0       0
  3332 ;;      Locals:         0       2       0       0       0
  3333 ;;      Temps:          0       0       0       0       0
  3334 ;;      Totals:         0       2       0       0       0
  3335 ;;Total ram usage:        2 bytes
  3336 ;; Hardware stack levels used:    1
  3337 ;; Hardware stack levels required when called:    2
  3338 ;; This function calls:
  3339 ;;		Nothing
  3340 ;; This function is called by:
  3341 ;;		_atoi
  3342 ;; This function uses a non-reentrant model
  3343 ;;
  3344                           
  3345                           
  3346                           ;psect for function _isdigit
  3347  0F79                     _isdigit:
  3348                           
  3349                           ;incstack = 0
  3350                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  3351                           ;isdigit@c stored from wreg
  3352  0F79  1283               	bcf	3,5	;RP0=0, select bank0
  3353  0F7A  1303               	bcf	3,6	;RP1=0, select bank0
  3354  0F7B  00A1               	movwf	isdigit@c
  3355  0F7C                     l1761:
  3356  0F7C  01A0               	clrf	_isdigit$1211
  3357  0F7D                     l1763:
  3358  0F7D  303A               	movlw	58
  3359  0F7E  0221               	subwf	isdigit@c,w
  3360  0F7F  1803               	skipnc
  3361  0F80  2F82               	goto	u821
  3362  0F81  2F83               	goto	u820
  3363  0F82                     u821:
  3364  0F82  2F8B               	goto	l1769
  3365  0F83                     u820:
  3366  0F83                     l1765:
  3367  0F83  3030               	movlw	48
  3368  0F84  0221               	subwf	isdigit@c,w
  3369  0F85  1C03               	skipc
  3370  0F86  2F88               	goto	u831
  3371  0F87  2F89               	goto	u830
  3372  0F88                     u831:
  3373  0F88  2F8B               	goto	l1769
  3374  0F89                     u830:
  3375  0F89                     l1767:
  3376  0F89  01A0               	clrf	_isdigit$1211
  3377  0F8A  0AA0               	incf	_isdigit$1211,f
  3378  0F8B                     l1769:
  3379  0F8B  0C20               	rrf	_isdigit$1211,w
  3380  0F8C                     l815:
  3381  0F8C  0008               	return
  3382  0F8D                     __end_of_isdigit:
  3383                           
  3384                           	psect	text14
  3385  0FD9                     __ptext14:	
  3386 ;; *************** function ___wmul *****************
  3387 ;; Defined at:
  3388 ;;		line 15 in file "D:\machorrin\Programas\mplab\pic\sources\c90\common\Umul16.c"
  3389 ;; Parameters:    Size  Location     Type
  3390 ;;  multiplier      2    0[BANK0 ] unsigned int 
  3391 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  3392 ;; Auto vars:     Size  Location     Type
  3393 ;;  product         2    4[BANK0 ] unsigned int 
  3394 ;; Return value:  Size  Location     Type
  3395 ;;                  2    0[BANK0 ] unsigned int 
  3396 ;; Registers used:
  3397 ;;		wreg, status,2, status,0
  3398 ;; Tracked objects:
  3399 ;;		On entry : 0/0
  3400 ;;		On exit  : 0/0
  3401 ;;		Unchanged: 0/0
  3402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3403 ;;      Params:         0       4       0       0       0
  3404 ;;      Locals:         0       2       0       0       0
  3405 ;;      Temps:          0       0       0       0       0
  3406 ;;      Totals:         0       6       0       0       0
  3407 ;;Total ram usage:        6 bytes
  3408 ;; Hardware stack levels used:    1
  3409 ;; Hardware stack levels required when called:    2
  3410 ;; This function calls:
  3411 ;;		Nothing
  3412 ;; This function is called by:
  3413 ;;		_atoi
  3414 ;; This function uses a non-reentrant model
  3415 ;;
  3416                           
  3417                           
  3418                           ;psect for function ___wmul
  3419  0FD9                     ___wmul:
  3420  0FD9                     l1747:	
  3421                           ;incstack = 0
  3422                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3423                           
  3424  0FD9  1283               	bcf	3,5	;RP0=0, select bank0
  3425  0FDA  1303               	bcf	3,6	;RP1=0, select bank0
  3426  0FDB  01A4               	clrf	___wmul@product
  3427  0FDC  01A5               	clrf	___wmul@product+1
  3428  0FDD                     l1749:
  3429  0FDD  1C20               	btfss	___wmul@multiplier,0
  3430  0FDE  2FE0               	goto	u781
  3431  0FDF  2FE1               	goto	u780
  3432  0FE0                     u781:
  3433  0FE0  2FE7               	goto	l347
  3434  0FE1                     u780:
  3435  0FE1                     l1751:
  3436  0FE1  0822               	movf	___wmul@multiplicand,w
  3437  0FE2  07A4               	addwf	___wmul@product,f
  3438  0FE3  1803               	skipnc
  3439  0FE4  0AA5               	incf	___wmul@product+1,f
  3440  0FE5  0823               	movf	___wmul@multiplicand+1,w
  3441  0FE6  07A5               	addwf	___wmul@product+1,f
  3442  0FE7                     l347:
  3443  0FE7  3001               	movlw	1
  3444  0FE8                     u795:
  3445  0FE8  1003               	clrc
  3446  0FE9  0DA2               	rlf	___wmul@multiplicand,f
  3447  0FEA  0DA3               	rlf	___wmul@multiplicand+1,f
  3448  0FEB  3EFF               	addlw	-1
  3449  0FEC  1D03               	skipz
  3450  0FED  2FE8               	goto	u795
  3451  0FEE                     l1753:
  3452  0FEE  3001               	movlw	1
  3453  0FEF                     u805:
  3454  0FEF  1003               	clrc
  3455  0FF0  0CA1               	rrf	___wmul@multiplier+1,f
  3456  0FF1  0CA0               	rrf	___wmul@multiplier,f
  3457  0FF2  3EFF               	addlw	-1
  3458  0FF3  1D03               	skipz
  3459  0FF4  2FEF               	goto	u805
  3460  0FF5                     l1755:
  3461  0FF5  0820               	movf	___wmul@multiplier,w
  3462  0FF6  0421               	iorwf	___wmul@multiplier+1,w
  3463  0FF7  1D03               	btfss	3,2
  3464  0FF8  2FFA               	goto	u811
  3465  0FF9  2FFB               	goto	u810
  3466  0FFA                     u811:
  3467  0FFA  2FDD               	goto	l1749
  3468  0FFB                     u810:
  3469  0FFB                     l1757:
  3470  0FFB  0825               	movf	___wmul@product+1,w
  3471  0FFC  00A1               	movwf	?___wmul+1
  3472  0FFD  0824               	movf	___wmul@product,w
  3473  0FFE  00A0               	movwf	?___wmul
  3474  0FFF                     l349:
  3475  0FFF  0008               	return
  3476  1000                     __end_of___wmul:
  3477                           
  3478                           	psect	text15
  3479  06C0                     __ptext15:	
  3480 ;; *************** function _SendString *****************
  3481 ;; Defined at:
  3482 ;;		line 455 in file "machorrobot.c"
  3483 ;; Parameters:    Size  Location     Type
  3484 ;;  string          2    1[BANK0 ] PTR const unsigned char 
  3485 ;;		 -> STR_8(4), STR_7(4), STR_6(3), STR_5(23), 
  3486 ;;		 -> STR_4(4), STR_3(4), STR_2(3), debug(6), 
  3487 ;;		 -> STR_1(23), numero(4), 
  3488 ;;  largo           1    3[BANK0 ] const unsigned char 
  3489 ;; Auto vars:     Size  Location     Type
  3490 ;;  i               2    7[BANK0 ] int 
  3491 ;; Return value:  Size  Location     Type
  3492 ;;                  1    wreg      void 
  3493 ;; Registers used:
  3494 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3495 ;; Tracked objects:
  3496 ;;		On entry : 0/0
  3497 ;;		On exit  : 0/0
  3498 ;;		Unchanged: 0/0
  3499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3500 ;;      Params:         0       3       0       0       0
  3501 ;;      Locals:         0       2       0       0       0
  3502 ;;      Temps:          0       3       0       0       0
  3503 ;;      Totals:         0       8       0       0       0
  3504 ;;Total ram usage:        8 bytes
  3505 ;; Hardware stack levels used:    1
  3506 ;; Hardware stack levels required when called:    3
  3507 ;; This function calls:
  3508 ;;		_SendChar
  3509 ;; This function is called by:
  3510 ;;		_ejecutarComando
  3511 ;;		_savePosition
  3512 ;;		_readPosition
  3513 ;; This function uses a non-reentrant model
  3514 ;;
  3515                           
  3516                           
  3517                           ;psect for function _SendString
  3518  06C0                     _SendString:
  3519  06C0                     l1817:	
  3520                           ;incstack = 0
  3521                           ; Regs used in _SendString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3522                           
  3523                           
  3524                           ;machorrobot.c: 456:     int i = 0;
  3525  06C0  1283               	bcf	3,5	;RP0=0, select bank0
  3526  06C1  1303               	bcf	3,6	;RP1=0, select bank0
  3527  06C2  01A7               	clrf	SendString@i
  3528  06C3  01A8               	clrf	SendString@i+1
  3529                           
  3530                           ;machorrobot.c: 457:     for (i=0 ; i<largo && string[i]!='\0' ; i++) {
  3531  06C4  01A7               	clrf	SendString@i
  3532  06C5  01A8               	clrf	SendString@i+1
  3533  06C6  2EEB               	goto	l1823
  3534  06C7                     l1819:
  3535                           
  3536                           ;machorrobot.c: 458:         SendChar(string[i]);
  3537  06C7  0827               	movf	SendString@i,w
  3538  06C8  0721               	addwf	SendString@string,w
  3539  06C9  00A5               	movwf	??_SendString+1
  3540  06CA  0822               	movf	SendString@string+1,w
  3541  06CB  00A4               	movwf	??_SendString
  3542  06CC  1803               	skipnc
  3543  06CD  0AA4               	incf	??_SendString,f
  3544  06CE  1FA7               	btfss	SendString@i,7
  3545  06CF  2ED1               	goto	u870
  3546  06D0  03A4               	decf	??_SendString,f
  3547  06D1                     u870:
  3548  06D1  1283               	bcf	3,5	;RP0=0, select bank0
  3549  06D2  1303               	bcf	3,6	;RP1=0, select bank0
  3550  06D3  0824               	movf	??_SendString,w
  3551  06D4  00A6               	movwf	??_SendString+2
  3552  06D5  0826               	movf	??_SendString+2,w
  3553  06D6  00FF               	movwf	btemp+1
  3554  06D7  0825               	movf	??_SendString+1,w
  3555  06D8  0084               	movwf	4
  3556  06D9  120A  118A  2717  120A  118A  	fcall	stringtab
  3557  06DE  120A  158A  274A  120A  118A  	fcall	_SendChar
  3558  06E3                     l1821:
  3559                           
  3560                           ;machorrobot.c: 459:     }
  3561  06E3  3001               	movlw	1
  3562  06E4  1283               	bcf	3,5	;RP0=0, select bank0
  3563  06E5  1303               	bcf	3,6	;RP1=0, select bank0
  3564  06E6  07A7               	addwf	SendString@i,f
  3565  06E7  1803               	skipnc
  3566  06E8  0AA8               	incf	SendString@i+1,f
  3567  06E9  3000               	movlw	0
  3568  06EA  07A8               	addwf	SendString@i+1,f
  3569  06EB                     l1823:
  3570  06EB  0828               	movf	SendString@i+1,w
  3571  06EC  3A80               	xorlw	128
  3572  06ED  00A4               	movwf	??_SendString
  3573  06EE  3080               	movlw	128
  3574  06EF  0224               	subwf	??_SendString,w
  3575  06F0  1D03               	skipz
  3576  06F1  2EF4               	goto	u885
  3577  06F2  0823               	movf	SendString@largo,w
  3578  06F3  0227               	subwf	SendString@i,w
  3579  06F4                     u885:
  3580  06F4  1803               	skipnc
  3581  06F5  2EF7               	goto	u881
  3582  06F6  2EF8               	goto	u880
  3583  06F7                     u881:
  3584  06F7  2F16               	goto	l231
  3585  06F8                     u880:
  3586  06F8                     l1825:
  3587  06F8  1283               	bcf	3,5	;RP0=0, select bank0
  3588  06F9  1303               	bcf	3,6	;RP1=0, select bank0
  3589  06FA  0827               	movf	SendString@i,w
  3590  06FB  0721               	addwf	SendString@string,w
  3591  06FC  00A5               	movwf	??_SendString+1
  3592  06FD  0822               	movf	SendString@string+1,w
  3593  06FE  00A4               	movwf	??_SendString
  3594  06FF  1803               	skipnc
  3595  0700  0AA4               	incf	??_SendString,f
  3596  0701  1FA7               	btfss	SendString@i,7
  3597  0702  2F04               	goto	u890
  3598  0703  03A4               	decf	??_SendString,f
  3599  0704                     u890:
  3600  0704  1283               	bcf	3,5	;RP0=0, select bank0
  3601  0705  1303               	bcf	3,6	;RP1=0, select bank0
  3602  0706  0824               	movf	??_SendString,w
  3603  0707  00A6               	movwf	??_SendString+2
  3604  0708  0826               	movf	??_SendString+2,w
  3605  0709  00FF               	movwf	btemp+1
  3606  070A  0825               	movf	??_SendString+1,w
  3607  070B  0084               	movwf	4
  3608  070C  120A  118A  2717  120A  118A  	fcall	stringtab
  3609  0711  3A00               	xorlw	0
  3610  0712  1D03               	skipz
  3611  0713  2F15               	goto	u901
  3612  0714  2F16               	goto	u900
  3613  0715                     u901:
  3614  0715  2EC7               	goto	l1819
  3615  0716                     u900:
  3616  0716                     l231:
  3617  0716  0008               	return
  3618  0717                     __end_of_SendString:
  3619                           
  3620                           	psect	text16
  3621  0F4A                     __ptext16:	
  3622 ;; *************** function _SendChar *****************
  3623 ;; Defined at:
  3624 ;;		line 449 in file "machorrobot.c"
  3625 ;; Parameters:    Size  Location     Type
  3626 ;;  caracter        1    wreg     const unsigned char 
  3627 ;; Auto vars:     Size  Location     Type
  3628 ;;  caracter        1    0[BANK0 ] const unsigned char 
  3629 ;; Return value:  Size  Location     Type
  3630 ;;                  1    wreg      void 
  3631 ;; Registers used:
  3632 ;;		wreg
  3633 ;; Tracked objects:
  3634 ;;		On entry : 0/0
  3635 ;;		On exit  : 0/0
  3636 ;;		Unchanged: 0/0
  3637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3638 ;;      Params:         0       0       0       0       0
  3639 ;;      Locals:         0       1       0       0       0
  3640 ;;      Temps:          0       0       0       0       0
  3641 ;;      Totals:         0       1       0       0       0
  3642 ;;Total ram usage:        1 bytes
  3643 ;; Hardware stack levels used:    1
  3644 ;; Hardware stack levels required when called:    2
  3645 ;; This function calls:
  3646 ;;		Nothing
  3647 ;; This function is called by:
  3648 ;;		_SendString
  3649 ;;		_ejecutarComando
  3650 ;;		_savePosition
  3651 ;;		_readPosition
  3652 ;; This function uses a non-reentrant model
  3653 ;;
  3654                           
  3655                           
  3656                           ;psect for function _SendChar
  3657  0F4A                     _SendChar:
  3658                           
  3659                           ;incstack = 0
  3660                           ; Regs used in _SendChar: [wreg]
  3661                           ;SendChar@caracter stored from wreg
  3662  0F4A  1283               	bcf	3,5	;RP0=0, select bank0
  3663  0F4B  1303               	bcf	3,6	;RP1=0, select bank0
  3664  0F4C  00A0               	movwf	SendChar@caracter
  3665  0F4D                     l1743:
  3666  0F4D                     l220:	
  3667                           ;machorrobot.c: 450:     while (TXSTAbits.TRMT == 0);
  3668                           
  3669  0F4D  1683               	bsf	3,5	;RP0=1, select bank1
  3670  0F4E  1303               	bcf	3,6	;RP1=0, select bank1
  3671  0F4F  1C98               	btfss	24,1	;volatile
  3672  0F50  2F52               	goto	u771
  3673  0F51  2F53               	goto	u770
  3674  0F52                     u771:
  3675  0F52  2F4D               	goto	l220
  3676  0F53                     u770:
  3677  0F53                     l1745:
  3678                           
  3679                           ;machorrobot.c: 451:     TXREG = caracter ;
  3680  0F53  1283               	bcf	3,5	;RP0=0, select bank0
  3681  0F54  1303               	bcf	3,6	;RP1=0, select bank0
  3682  0F55  0820               	movf	SendChar@caracter,w
  3683  0F56  0099               	movwf	25	;volatile
  3684  0F57                     l223:
  3685  0F57  0008               	return
  3686  0F58                     __end_of_SendChar:
  3687                           
  3688                           	psect	text17
  3689  064E                     __ptext17:	
  3690 ;; *************** function _aletear *****************
  3691 ;; Defined at:
  3692 ;;		line 330 in file "machorrobot.c"
  3693 ;; Parameters:    Size  Location     Type
  3694 ;;		None
  3695 ;; Auto vars:     Size  Location     Type
  3696 ;;  i               1   10[BANK0 ] unsigned char 
  3697 ;;  i               1    9[BANK0 ] unsigned char 
  3698 ;;  i               1    8[BANK0 ] unsigned char 
  3699 ;; Return value:  Size  Location     Type
  3700 ;;                  1    wreg      void 
  3701 ;; Registers used:
  3702 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3703 ;; Tracked objects:
  3704 ;;		On entry : 0/0
  3705 ;;		On exit  : 0/0
  3706 ;;		Unchanged: 0/0
  3707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3708 ;;      Params:         0       0       0       0       0
  3709 ;;      Locals:         0       3       0       0       0
  3710 ;;      Temps:          0       2       0       0       0
  3711 ;;      Totals:         0       5       0       0       0
  3712 ;;Total ram usage:        5 bytes
  3713 ;; Hardware stack levels used:    1
  3714 ;; Hardware stack levels required when called:    4
  3715 ;; This function calls:
  3716 ;;		_moveCCPservo
  3717 ;; This function is called by:
  3718 ;;		_main
  3719 ;; This function uses a non-reentrant model
  3720 ;;
  3721                           
  3722                           
  3723                           ;psect for function _aletear
  3724  064E                     _aletear:
  3725  064E                     l1991:	
  3726                           ;incstack = 0
  3727                           ; Regs used in _aletear: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3728                           
  3729                           
  3730                           ;machorrobot.c: 331:     PORTBbits.RB6 = 0;
  3731  064E  1283               	bcf	3,5	;RP0=0, select bank0
  3732  064F  1303               	bcf	3,6	;RP1=0, select bank0
  3733  0650  1306               	bcf	6,6	;volatile
  3734  0651                     l1993:
  3735                           
  3736                           ;machorrobot.c: 333:     for (char i = 0; i < 6 ; i++) angulos[i] = 64;
  3737  0651  01A8               	clrf	aletear@i
  3738  0652                     l1999:
  3739  0652  3040               	movlw	64
  3740  0653  00A6               	movwf	??_aletear
  3741  0654  0828               	movf	aletear@i,w
  3742  0655  3E78               	addlw	(low (_angulos| 0))& (0+255)
  3743  0656  0084               	movwf	4
  3744  0657  0826               	movf	??_aletear,w
  3745  0658  0080               	movwf	0
  3746  0659                     l2001:
  3747  0659  3001               	movlw	1
  3748  065A  00A6               	movwf	??_aletear
  3749  065B  0826               	movf	??_aletear,w
  3750  065C  07A8               	addwf	aletear@i,f
  3751  065D                     l2003:
  3752  065D  3006               	movlw	6
  3753  065E  0228               	subwf	aletear@i,w
  3754  065F  1C03               	skipc
  3755  0660  2E62               	goto	u1011
  3756  0661  2E63               	goto	u1010
  3757  0662                     u1011:
  3758  0662  2E52               	goto	l1999
  3759  0663                     u1010:
  3760  0663                     l2005:
  3761                           
  3762                           ;machorrobot.c: 334:     for (char i = 10; i <70 ; i++ ){
  3763  0663  300A               	movlw	10
  3764  0664  00A6               	movwf	??_aletear
  3765  0665  0826               	movf	??_aletear,w
  3766  0666  00A9               	movwf	aletear@i_731
  3767  0667                     l2009:
  3768                           
  3769                           ;machorrobot.c: 335:         moveCCPservo(i,1);
  3770  0667  01A1               	clrf	moveCCPservo@servo
  3771  0668  0AA1               	incf	moveCCPservo@servo,f
  3772  0669  0829               	movf	aletear@i_731,w
  3773  066A  120A  158A  278D  120A  118A  	fcall	_moveCCPservo
  3774                           
  3775                           ;machorrobot.c: 336:         moveCCPservo(i,2);
  3776  066F  3002               	movlw	2
  3777  0670  1283               	bcf	3,5	;RP0=0, select bank0
  3778  0671  1303               	bcf	3,6	;RP1=0, select bank0
  3779  0672  00A6               	movwf	??_aletear
  3780  0673  0826               	movf	??_aletear,w
  3781  0674  00A1               	movwf	moveCCPservo@servo
  3782  0675  0829               	movf	aletear@i_731,w
  3783  0676  120A  158A  278D  120A  118A  	fcall	_moveCCPservo
  3784  067B                     l2011:
  3785                           
  3786                           ;machorrobot.c: 337:         _delay((unsigned long)((20)*(4000000/4000.0)));
  3787  067B  301A               	movlw	26
  3788  067C  1283               	bcf	3,5	;RP0=0, select bank0
  3789  067D  1303               	bcf	3,6	;RP1=0, select bank0
  3790  067E  00A7               	movwf	??_aletear+1
  3791  067F  30F7               	movlw	247
  3792  0680  00A6               	movwf	??_aletear
  3793  0681                     u1317:
  3794  0681  0BA6               	decfsz	??_aletear,f
  3795  0682  2E81               	goto	u1317
  3796  0683  0BA7               	decfsz	??_aletear+1,f
  3797  0684  2E81               	goto	u1317
  3798  0685  2E86               	nop2
  3799  0686                     l2013:
  3800                           
  3801                           ;machorrobot.c: 338:     }
  3802  0686  3001               	movlw	1
  3803  0687  1283               	bcf	3,5	;RP0=0, select bank0
  3804  0688  1303               	bcf	3,6	;RP1=0, select bank0
  3805  0689  00A6               	movwf	??_aletear
  3806  068A  0826               	movf	??_aletear,w
  3807  068B  07A9               	addwf	aletear@i_731,f
  3808  068C                     l2015:
  3809  068C  3046               	movlw	70
  3810  068D  0229               	subwf	aletear@i_731,w
  3811  068E  1C03               	skipc
  3812  068F  2E91               	goto	u1021
  3813  0690  2E92               	goto	u1020
  3814  0691                     u1021:
  3815  0691  2E67               	goto	l2009
  3816  0692                     u1020:
  3817  0692                     l2017:
  3818                           
  3819                           ;machorrobot.c: 339:     for (char i = 70; i >10 ; i-- ){
  3820  0692  3046               	movlw	70
  3821  0693  00A6               	movwf	??_aletear
  3822  0694  0826               	movf	??_aletear,w
  3823  0695  00AA               	movwf	aletear@i_733
  3824  0696                     l2021:
  3825                           
  3826                           ;machorrobot.c: 340:         moveCCPservo(i,1);
  3827  0696  01A1               	clrf	moveCCPservo@servo
  3828  0697  0AA1               	incf	moveCCPservo@servo,f
  3829  0698  082A               	movf	aletear@i_733,w
  3830  0699  120A  158A  278D  120A  118A  	fcall	_moveCCPservo
  3831                           
  3832                           ;machorrobot.c: 341:         moveCCPservo(i,2);
  3833  069E  3002               	movlw	2
  3834  069F  1283               	bcf	3,5	;RP0=0, select bank0
  3835  06A0  1303               	bcf	3,6	;RP1=0, select bank0
  3836  06A1  00A6               	movwf	??_aletear
  3837  06A2  0826               	movf	??_aletear,w
  3838  06A3  00A1               	movwf	moveCCPservo@servo
  3839  06A4  082A               	movf	aletear@i_733,w
  3840  06A5  120A  158A  278D  120A  118A  	fcall	_moveCCPservo
  3841  06AA                     l2023:
  3842                           
  3843                           ;machorrobot.c: 342:         _delay((unsigned long)((20)*(4000000/4000.0)));
  3844  06AA  301A               	movlw	26
  3845  06AB  1283               	bcf	3,5	;RP0=0, select bank0
  3846  06AC  1303               	bcf	3,6	;RP1=0, select bank0
  3847  06AD  00A7               	movwf	??_aletear+1
  3848  06AE  30F7               	movlw	247
  3849  06AF  00A6               	movwf	??_aletear
  3850  06B0                     u1327:
  3851  06B0  0BA6               	decfsz	??_aletear,f
  3852  06B1  2EB0               	goto	u1327
  3853  06B2  0BA7               	decfsz	??_aletear+1,f
  3854  06B3  2EB0               	goto	u1327
  3855  06B4  2EB5               	nop2
  3856  06B5                     l2025:
  3857                           
  3858                           ;machorrobot.c: 343:     }
  3859  06B5  3001               	movlw	1
  3860  06B6  1283               	bcf	3,5	;RP0=0, select bank0
  3861  06B7  1303               	bcf	3,6	;RP1=0, select bank0
  3862  06B8  02AA               	subwf	aletear@i_733,f
  3863  06B9                     l2027:
  3864  06B9  300B               	movlw	11
  3865  06BA  022A               	subwf	aletear@i_733,w
  3866  06BB  1803               	skipnc
  3867  06BC  2EBE               	goto	u1031
  3868  06BD  2EBF               	goto	u1030
  3869  06BE                     u1031:
  3870  06BE  2E96               	goto	l2021
  3871  06BF                     u1030:
  3872  06BF                     l198:
  3873  06BF  0008               	return
  3874  06C0                     __end_of_aletear:
  3875                           
  3876                           	psect	text18
  3877  0F8D                     __ptext18:	
  3878 ;; *************** function _moveCCPservo *****************
  3879 ;; Defined at:
  3880 ;;		line 314 in file "machorrobot.c"
  3881 ;; Parameters:    Size  Location     Type
  3882 ;;  angle           1    wreg     unsigned char 
  3883 ;;  servo           1    1[BANK0 ] unsigned char 
  3884 ;; Auto vars:     Size  Location     Type
  3885 ;;  angle           1    4[BANK0 ] unsigned char 
  3886 ;;  valor           1    5[BANK0 ] unsigned char 
  3887 ;; Return value:  Size  Location     Type
  3888 ;;                  1    wreg      void 
  3889 ;; Registers used:
  3890 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3891 ;; Tracked objects:
  3892 ;;		On entry : 0/0
  3893 ;;		On exit  : 0/0
  3894 ;;		Unchanged: 0/0
  3895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3896 ;;      Params:         0       1       0       0       0
  3897 ;;      Locals:         0       2       0       0       0
  3898 ;;      Temps:          0       2       0       0       0
  3899 ;;      Totals:         0       5       0       0       0
  3900 ;;Total ram usage:        5 bytes
  3901 ;; Hardware stack levels used:    1
  3902 ;; Hardware stack levels required when called:    3
  3903 ;; This function calls:
  3904 ;;		_cicloDeTrabajo
  3905 ;; This function is called by:
  3906 ;;		_aletear
  3907 ;;		_moonwalk
  3908 ;;		_ejecutarComando
  3909 ;; This function uses a non-reentrant model
  3910 ;;
  3911                           
  3912                           
  3913                           ;psect for function _moveCCPservo
  3914  0F8D                     _moveCCPservo:
  3915                           
  3916                           ;incstack = 0
  3917                           ; Regs used in _moveCCPservo: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3918                           ;moveCCPservo@angle stored from wreg
  3919  0F8D  1283               	bcf	3,5	;RP0=0, select bank0
  3920  0F8E  1303               	bcf	3,6	;RP1=0, select bank0
  3921  0F8F  00A4               	movwf	moveCCPservo@angle
  3922  0F90                     l1803:
  3923                           
  3924                           ;machorrobot.c: 315:     unsigned char valor = cicloDeTrabajo(angle);
  3925  0F90  0824               	movf	moveCCPservo@angle,w
  3926  0F91  120A  158A  273C  120A  158A  	fcall	_cicloDeTrabajo
  3927  0F96  1283               	bcf	3,5	;RP0=0, select bank0
  3928  0F97  1303               	bcf	3,6	;RP1=0, select bank0
  3929  0F98  00A2               	movwf	??_moveCCPservo
  3930  0F99  0822               	movf	??_moveCCPservo,w
  3931  0F9A  00A5               	movwf	moveCCPservo@valor
  3932                           
  3933                           ;machorrobot.c: 317:     switch(servo){
  3934  0F9B  2FA2               	goto	l1811
  3935  0F9C                     l1805:
  3936                           
  3937                           ;machorrobot.c: 319:             CCPR1L = valor;
  3938  0F9C  0825               	movf	moveCCPservo@valor,w
  3939  0F9D  0095               	movwf	21	;volatile
  3940                           
  3941                           ;machorrobot.c: 320:             break;
  3942  0F9E  2FB2               	goto	l189
  3943  0F9F                     l1807:
  3944                           
  3945                           ;machorrobot.c: 322:             CCPR2L = valor;
  3946  0F9F  0825               	movf	moveCCPservo@valor,w
  3947  0FA0  009B               	movwf	27	;volatile
  3948                           
  3949                           ;machorrobot.c: 323:             break;
  3950  0FA1  2FB2               	goto	l189
  3951  0FA2                     l1811:
  3952  0FA2  0821               	movf	moveCCPservo@servo,w
  3953  0FA3  00A2               	movwf	??_moveCCPservo
  3954  0FA4  01A3               	clrf	??_moveCCPservo+1
  3955                           
  3956                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3957                           ; Switch size 1, requested type "simple"
  3958                           ; Number of cases is 1, Range of values is 0 to 0
  3959                           ; switch strategies available:
  3960                           ; Name         Instructions Cycles
  3961                           ; simple_byte            4     3 (average)
  3962                           ; direct_byte           11     8 (fixed)
  3963                           ; jumptable            260     6 (fixed)
  3964                           ;	Chosen strategy is simple_byte
  3965  0FA5  0823               	movf	??_moveCCPservo+1,w
  3966  0FA6  3A00               	xorlw	0	; case 0
  3967  0FA7  1903               	skipnz
  3968  0FA8  2FAA               	goto	l2487
  3969  0FA9  2FB2               	goto	l189
  3970  0FAA                     l2487:
  3971                           
  3972                           ; Switch size 1, requested type "simple"
  3973                           ; Number of cases is 2, Range of values is 1 to 2
  3974                           ; switch strategies available:
  3975                           ; Name         Instructions Cycles
  3976                           ; simple_byte            7     4 (average)
  3977                           ; direct_byte           17    11 (fixed)
  3978                           ; jumptable            263     9 (fixed)
  3979                           ;	Chosen strategy is simple_byte
  3980  0FAA  0822               	movf	??_moveCCPservo,w
  3981  0FAB  3A01               	xorlw	1	; case 1
  3982  0FAC  1903               	skipnz
  3983  0FAD  2F9C               	goto	l1805
  3984  0FAE  3A03               	xorlw	3	; case 2
  3985  0FAF  1903               	skipnz
  3986  0FB0  2F9F               	goto	l1807
  3987  0FB1  2FB2               	goto	l189
  3988  0FB2                     l189:
  3989  0FB2  0008               	return
  3990  0FB3                     __end_of_moveCCPservo:
  3991                           
  3992                           	psect	text19
  3993  0F3C                     __ptext19:	
  3994 ;; *************** function _cicloDeTrabajo *****************
  3995 ;; Defined at:
  3996 ;;		line 309 in file "machorrobot.c"
  3997 ;; Parameters:    Size  Location     Type
  3998 ;;  valor           1    wreg     unsigned char 
  3999 ;; Auto vars:     Size  Location     Type
  4000 ;;  valor           1    0[BANK0 ] unsigned char 
  4001 ;; Return value:  Size  Location     Type
  4002 ;;                  1    wreg      unsigned char 
  4003 ;; Registers used:
  4004 ;;		wreg, status,2, status,0
  4005 ;; Tracked objects:
  4006 ;;		On entry : 0/0
  4007 ;;		On exit  : 0/0
  4008 ;;		Unchanged: 0/0
  4009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4010 ;;      Params:         0       0       0       0       0
  4011 ;;      Locals:         0       1       0       0       0
  4012 ;;      Temps:          0       0       0       0       0
  4013 ;;      Totals:         0       1       0       0       0
  4014 ;;Total ram usage:        1 bytes
  4015 ;; Hardware stack levels used:    1
  4016 ;; Hardware stack levels required when called:    2
  4017 ;; This function calls:
  4018 ;;		Nothing
  4019 ;; This function is called by:
  4020 ;;		_moveCCPservo
  4021 ;; This function uses a non-reentrant model
  4022 ;;
  4023                           
  4024                           
  4025                           ;psect for function _cicloDeTrabajo
  4026  0F3C                     _cicloDeTrabajo:
  4027                           
  4028                           ;incstack = 0
  4029                           ; Regs used in _cicloDeTrabajo: [wreg+status,2+status,0]
  4030                           ;cicloDeTrabajo@valor stored from wreg
  4031  0F3C  1283               	bcf	3,5	;RP0=0, select bank0
  4032  0F3D  1303               	bcf	3,6	;RP1=0, select bank0
  4033  0F3E  00A0               	movwf	cicloDeTrabajo@valor
  4034  0F3F                     l1739:
  4035                           
  4036                           ;machorrobot.c: 310:     return valor+31;
  4037  0F3F  0820               	movf	cicloDeTrabajo@valor,w
  4038  0F40  3E1F               	addlw	31
  4039  0F41                     l182:
  4040  0F41  0008               	return
  4041  0F42                     __end_of_cicloDeTrabajo:
  4042                           
  4043                           	psect	text20
  4044  0046                     __ptext20:	
  4045 ;; *************** function _ISR *****************
  4046 ;; Defined at:
  4047 ;;		line 78 in file "machorrobot.c"
  4048 ;; Parameters:    Size  Location     Type
  4049 ;;		None
  4050 ;; Auto vars:     Size  Location     Type
  4051 ;;  aux             1    7[COMMON] unsigned char 
  4052 ;; Return value:  Size  Location     Type
  4053 ;;                  1    wreg      void 
  4054 ;; Registers used:
  4055 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4056 ;; Tracked objects:
  4057 ;;		On entry : 0/0
  4058 ;;		On exit  : 0/0
  4059 ;;		Unchanged: 0/0
  4060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4061 ;;      Params:         0       0       0       0       0
  4062 ;;      Locals:         1       0       0       0       0
  4063 ;;      Temps:          6       0       0       0       0
  4064 ;;      Totals:         7       0       0       0       0
  4065 ;;Total ram usage:        7 bytes
  4066 ;; Hardware stack levels used:    1
  4067 ;; Hardware stack levels required when called:    1
  4068 ;; This function calls:
  4069 ;;		i1_cicloDeTrabajo
  4070 ;; This function is called by:
  4071 ;;		Interrupt level 1
  4072 ;; This function uses a non-reentrant model
  4073 ;;
  4074                           
  4075                           
  4076                           ;psect for function _ISR
  4077  0046                     _ISR:
  4078  0046                     i1l2119:
  4079                           
  4080                           ;machorrobot.c: 80:     if(INTCONbits.T0IF){
  4081  0046  1D0B               	btfss	11,2	;volatile
  4082  0047  2849               	goto	u110_21
  4083  0048  284A               	goto	u110_20
  4084  0049                     u110_21:
  4085  0049  28B9               	goto	i1l2143
  4086  004A                     u110_20:
  4087  004A  289B               	goto	i1l2137
  4088  004B                     i1l139:	
  4089                           ;machorrobot.c: 84:             case 0 :
  4090                           
  4091                           
  4092                           ;machorrobot.c: 85:                 PORTCbits.RC0 = 1;
  4093  004B  1283               	bcf	3,5	;RP0=0, select bank0
  4094  004C  1303               	bcf	3,6	;RP1=0, select bank0
  4095  004D  1407               	bsf	7,0	;volatile
  4096  004E                     i1l2123:
  4097                           
  4098                           ;machorrobot.c: 86:                 TMR0 = 0-cicloDeTrabajo(angulos[contador]);
  4099  004E  087D               	movf	_contador,w
  4100  004F  3E78               	addlw	(low (_angulos| 0))& (0+255)
  4101  0050  0084               	movwf	4
  4102  0051  0800               	movf	0,w
  4103  0052  120A  158A  2734  120A  118A  	fcall	i1_cicloDeTrabajo
  4104  0057  3C00               	sublw	0
  4105  0058  1283               	bcf	3,5	;RP0=0, select bank0
  4106  0059  1303               	bcf	3,6	;RP1=0, select bank0
  4107  005A  0081               	movwf	1	;volatile
  4108                           
  4109                           ;machorrobot.c: 87:                 break;
  4110  005B  28B4               	goto	i1l2139
  4111  005C                     i1l141:	
  4112                           ;machorrobot.c: 88:             case 1:
  4113                           
  4114                           
  4115                           ;machorrobot.c: 89:                 PORTCbits.RC0 = 0;
  4116  005C  1283               	bcf	3,5	;RP0=0, select bank0
  4117  005D  1303               	bcf	3,6	;RP1=0, select bank0
  4118  005E  1007               	bcf	7,0	;volatile
  4119                           
  4120                           ;machorrobot.c: 90:                 PORTCbits.RC3 = 1;
  4121  005F  1587               	bsf	7,3	;volatile
  4122  0060                     i1l2125:
  4123                           
  4124                           ;machorrobot.c: 91:                 TMR0 = 0-cicloDeTrabajo(angulos[contador]);
  4125  0060  087D               	movf	_contador,w
  4126  0061  3E78               	addlw	(low (_angulos| 0))& (0+255)
  4127  0062  0084               	movwf	4
  4128  0063  0800               	movf	0,w
  4129  0064  120A  158A  2734  120A  118A  	fcall	i1_cicloDeTrabajo
  4130  0069  3C00               	sublw	0
  4131  006A  1283               	bcf	3,5	;RP0=0, select bank0
  4132  006B  1303               	bcf	3,6	;RP1=0, select bank0
  4133  006C  0081               	movwf	1	;volatile
  4134                           
  4135                           ;machorrobot.c: 92:                 break;
  4136  006D  28B4               	goto	i1l2139
  4137  006E                     i1l142:	
  4138                           ;machorrobot.c: 93:             case 2:
  4139                           
  4140                           
  4141                           ;machorrobot.c: 94:                 PORTCbits.RC3 = 0;
  4142  006E  1283               	bcf	3,5	;RP0=0, select bank0
  4143  006F  1303               	bcf	3,6	;RP1=0, select bank0
  4144  0070  1187               	bcf	7,3	;volatile
  4145                           
  4146                           ;machorrobot.c: 95:                 PORTDbits.RD0 = 1;
  4147  0071  1408               	bsf	8,0	;volatile
  4148  0072                     i1l2127:
  4149                           
  4150                           ;machorrobot.c: 96:                 TMR0 = 0-cicloDeTrabajo(angulos[contador]);
  4151  0072  087D               	movf	_contador,w
  4152  0073  3E78               	addlw	(low (_angulos| 0))& (0+255)
  4153  0074  0084               	movwf	4
  4154  0075  0800               	movf	0,w
  4155  0076  120A  158A  2734  120A  118A  	fcall	i1_cicloDeTrabajo
  4156  007B  3C00               	sublw	0
  4157  007C  1283               	bcf	3,5	;RP0=0, select bank0
  4158  007D  1303               	bcf	3,6	;RP1=0, select bank0
  4159  007E  0081               	movwf	1	;volatile
  4160                           
  4161                           ;machorrobot.c: 97:                 break;
  4162  007F  28B4               	goto	i1l2139
  4163  0080                     i1l143:	
  4164                           ;machorrobot.c: 98:             case 3:
  4165                           
  4166                           
  4167                           ;machorrobot.c: 99:                 PORTDbits.RD0 = 0;
  4168  0080  1283               	bcf	3,5	;RP0=0, select bank0
  4169  0081  1303               	bcf	3,6	;RP1=0, select bank0
  4170  0082  1008               	bcf	8,0	;volatile
  4171                           
  4172                           ;machorrobot.c: 100:                 PORTDbits.RD1 = 1;
  4173  0083  1488               	bsf	8,1	;volatile
  4174  0084                     i1l2129:
  4175                           
  4176                           ;machorrobot.c: 101:                 TMR0 = 0-cicloDeTrabajo(angulos[contador]);
  4177  0084  087D               	movf	_contador,w
  4178  0085  3E78               	addlw	(low (_angulos| 0))& (0+255)
  4179  0086  0084               	movwf	4
  4180  0087  0800               	movf	0,w
  4181  0088  120A  158A  2734  120A  118A  	fcall	i1_cicloDeTrabajo
  4182  008D  3C00               	sublw	0
  4183  008E  1283               	bcf	3,5	;RP0=0, select bank0
  4184  008F  1303               	bcf	3,6	;RP1=0, select bank0
  4185  0090  0081               	movwf	1	;volatile
  4186                           
  4187                           ;machorrobot.c: 102:                 break;
  4188  0091  28B4               	goto	i1l2139
  4189  0092                     i1l144:	
  4190                           ;machorrobot.c: 103:             case 4:
  4191                           
  4192                           
  4193                           ;machorrobot.c: 104:                 PORTDbits.RD1 = 0;
  4194  0092  1283               	bcf	3,5	;RP0=0, select bank0
  4195  0093  1303               	bcf	3,6	;RP1=0, select bank0
  4196  0094  1088               	bcf	8,1	;volatile
  4197  0095                     i1l2131:
  4198                           
  4199                           ;machorrobot.c: 105:                 TMR0 = 0;
  4200  0095  0181               	clrf	1	;volatile
  4201  0096                     i1l2133:
  4202                           
  4203                           ;machorrobot.c: 106:                 contador = 255;
  4204  0096  30FF               	movlw	255
  4205  0097  00F1               	movwf	??_ISR
  4206  0098  0871               	movf	??_ISR,w
  4207  0099  00FD               	movwf	_contador	;volatile
  4208                           
  4209                           ;machorrobot.c: 107:                 break;
  4210  009A  28B4               	goto	i1l2139
  4211  009B                     i1l2137:
  4212  009B  087D               	movf	_contador,w	;volatile
  4213  009C  00F1               	movwf	??_ISR
  4214  009D  01F2               	clrf	??_ISR+1
  4215                           
  4216                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4217                           ; Switch size 1, requested type "simple"
  4218                           ; Number of cases is 1, Range of values is 0 to 0
  4219                           ; switch strategies available:
  4220                           ; Name         Instructions Cycles
  4221                           ; simple_byte            4     3 (average)
  4222                           ; direct_byte           11     8 (fixed)
  4223                           ; jumptable            260     6 (fixed)
  4224                           ;	Chosen strategy is simple_byte
  4225  009E  0872               	movf	??_ISR+1,w
  4226  009F  3A00               	xorlw	0	; case 0
  4227  00A0  1903               	skipnz
  4228  00A1  28A3               	goto	i1l2489
  4229  00A2  28B4               	goto	i1l2139
  4230  00A3                     i1l2489:
  4231                           
  4232                           ; Switch size 1, requested type "simple"
  4233                           ; Number of cases is 5, Range of values is 0 to 4
  4234                           ; switch strategies available:
  4235                           ; Name         Instructions Cycles
  4236                           ; simple_byte           16     9 (average)
  4237                           ; direct_byte           23     8 (fixed)
  4238                           ; jumptable            260     6 (fixed)
  4239                           ;	Chosen strategy is simple_byte
  4240  00A3  0871               	movf	??_ISR,w
  4241  00A4  3A00               	xorlw	0	; case 0
  4242  00A5  1903               	skipnz
  4243  00A6  284B               	goto	i1l139
  4244  00A7  3A01               	xorlw	1	; case 1
  4245  00A8  1903               	skipnz
  4246  00A9  285C               	goto	i1l141
  4247  00AA  3A03               	xorlw	3	; case 2
  4248  00AB  1903               	skipnz
  4249  00AC  286E               	goto	i1l142
  4250  00AD  3A01               	xorlw	1	; case 3
  4251  00AE  1903               	skipnz
  4252  00AF  2880               	goto	i1l143
  4253  00B0  3A07               	xorlw	7	; case 4
  4254  00B1  1903               	skipnz
  4255  00B2  2892               	goto	i1l144
  4256  00B3  28B4               	goto	i1l2139
  4257  00B4                     i1l2139:
  4258                           
  4259                           ;machorrobot.c: 110:         contador++;
  4260  00B4  3001               	movlw	1
  4261  00B5  00F1               	movwf	??_ISR
  4262  00B6  0871               	movf	??_ISR,w
  4263  00B7  07FD               	addwf	_contador,f	;volatile
  4264  00B8                     i1l2141:
  4265                           
  4266                           ;machorrobot.c: 111:         T0IF = 0;
  4267  00B8  110B               	bcf	11,2	;volatile
  4268  00B9                     i1l2143:
  4269                           
  4270                           ;machorrobot.c: 114:     if (PIR1bits.RCIF){
  4271  00B9  1283               	bcf	3,5	;RP0=0, select bank0
  4272  00BA  1303               	bcf	3,6	;RP1=0, select bank0
  4273  00BB  1E8C               	btfss	12,5	;volatile
  4274  00BC  28BE               	goto	u111_21
  4275  00BD  28BF               	goto	u111_20
  4276  00BE                     u111_21:
  4277  00BE  2917               	goto	i1l145
  4278  00BF                     u111_20:
  4279  00BF                     i1l2145:
  4280                           
  4281                           ;machorrobot.c: 115:         char aux = RCREG;
  4282  00BF  081A               	movf	26,w	;volatile
  4283  00C0  00F1               	movwf	??_ISR
  4284  00C1  0871               	movf	??_ISR,w
  4285  00C2  00F7               	movwf	ISR@aux
  4286  00C3                     i1l2147:
  4287                           
  4288                           ;machorrobot.c: 116:         if(!ejecutaComando){
  4289  00C3  083E               	movf	_ejecutaComando,w	;volatile
  4290  00C4  1D03               	btfss	3,2
  4291  00C5  28C7               	goto	u112_21
  4292  00C6  28C8               	goto	u112_20
  4293  00C7                     u112_21:
  4294  00C7  2917               	goto	i1l145
  4295  00C8                     u112_20:
  4296  00C8  28FB               	goto	i1l2171
  4297  00C9                     i1l151:	
  4298                           ;machorrobot.c: 122:                case 'D':
  4299                           
  4300  00C9                     i1l2151:
  4301                           
  4302                           ;machorrobot.c: 125:                    comando = aux;
  4303  00C9  0877               	movf	ISR@aux,w
  4304  00CA  00F1               	movwf	??_ISR
  4305  00CB  0871               	movf	??_ISR,w
  4306  00CC  00C0               	movwf	_comando	;volatile
  4307                           
  4308                           ;machorrobot.c: 126:                    hayComando = 1;
  4309  00CD  3001               	movlw	1
  4310  00CE  00F1               	movwf	??_ISR
  4311  00CF  0871               	movf	??_ISR,w
  4312  00D0  00BF               	movwf	_hayComando	;volatile
  4313                           
  4314                           ;machorrobot.c: 127:                    break;
  4315  00D1  2917               	goto	i1l145
  4316  00D2                     i1l2153:
  4317                           
  4318                           ;machorrobot.c: 129:                    if(hayComando){
  4319  00D2  083F               	movf	_hayComando,w	;volatile
  4320  00D3  1903               	btfsc	3,2
  4321  00D4  28D6               	goto	u113_21
  4322  00D5  28D7               	goto	u113_20
  4323  00D6                     u113_21:
  4324  00D6  2917               	goto	i1l145
  4325  00D7                     u113_20:
  4326  00D7                     i1l2155:
  4327                           
  4328                           ;machorrobot.c: 130:                        if( aux != ';' && contadorDatos<3){
  4329  00D7  303B               	movlw	59
  4330  00D8  0677               	xorwf	ISR@aux,w
  4331  00D9  1903               	btfsc	3,2
  4332  00DA  28DC               	goto	u114_21
  4333  00DB  28DD               	goto	u114_20
  4334  00DC                     u114_21:
  4335  00DC  28F0               	goto	i1l2163
  4336  00DD                     u114_20:
  4337  00DD                     i1l2157:
  4338  00DD  3003               	movlw	3
  4339  00DE  027C               	subwf	_contadorDatos,w	;volatile
  4340  00DF  1803               	skipnc
  4341  00E0  28E2               	goto	u115_21
  4342  00E1  28E3               	goto	u115_20
  4343  00E2                     u115_21:
  4344  00E2  28F0               	goto	i1l2163
  4345  00E3                     u115_20:
  4346  00E3                     i1l2159:
  4347                           
  4348                           ;machorrobot.c: 131:                            numero[contadorDatos] = aux;
  4349  00E3  0877               	movf	ISR@aux,w
  4350  00E4  00F1               	movwf	??_ISR
  4351  00E5  087C               	movf	_contadorDatos,w
  4352  00E6  3E4A               	addlw	(low (_numero| 0))& (0+255)
  4353  00E7  0084               	movwf	4
  4354  00E8  0871               	movf	??_ISR,w
  4355  00E9  1383               	bcf	3,7	;select IRP bank0
  4356  00EA  0080               	movwf	0
  4357  00EB                     i1l2161:
  4358                           
  4359                           ;machorrobot.c: 132:                            contadorDatos++;
  4360  00EB  3001               	movlw	1
  4361  00EC  00F1               	movwf	??_ISR
  4362  00ED  0871               	movf	??_ISR,w
  4363  00EE  07FC               	addwf	_contadorDatos,f	;volatile
  4364                           
  4365                           ;machorrobot.c: 134:                        }else{
  4366  00EF  2917               	goto	i1l145
  4367  00F0                     i1l2163:
  4368                           
  4369                           ;machorrobot.c: 135:                            numero[contadorDatos] = '\0';
  4370  00F0  087C               	movf	_contadorDatos,w
  4371  00F1  3E4A               	addlw	(low (_numero| 0))& (0+255)
  4372  00F2  0084               	movwf	4
  4373  00F3  1383               	bcf	3,7	;select IRP bank0
  4374  00F4  0180               	clrf	0
  4375  00F5                     i1l2165:
  4376                           
  4377                           ;machorrobot.c: 137:                            ejecutaComando = 1;
  4378  00F5  3001               	movlw	1
  4379  00F6  00F1               	movwf	??_ISR
  4380  00F7  0871               	movf	??_ISR,w
  4381  00F8  00BE               	movwf	_ejecutaComando	;volatile
  4382  00F9                     i1l2167:
  4383                           
  4384                           ;machorrobot.c: 138:                            contadorDatos = 0;
  4385  00F9  01FC               	clrf	_contadorDatos	;volatile
  4386  00FA  2917               	goto	i1l145
  4387  00FB                     i1l2171:
  4388  00FB  0877               	movf	ISR@aux,w
  4389  00FC  00F1               	movwf	??_ISR
  4390  00FD  01F2               	clrf	??_ISR+1
  4391                           
  4392                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4393                           ; Switch size 1, requested type "simple"
  4394                           ; Number of cases is 1, Range of values is 0 to 0
  4395                           ; switch strategies available:
  4396                           ; Name         Instructions Cycles
  4397                           ; simple_byte            4     3 (average)
  4398                           ; direct_byte           11     8 (fixed)
  4399                           ; jumptable            260     6 (fixed)
  4400                           ;	Chosen strategy is simple_byte
  4401  00FE  0872               	movf	??_ISR+1,w
  4402  00FF  3A00               	xorlw	0	; case 0
  4403  0100  1903               	skipnz
  4404  0101  2903               	goto	i1l2491
  4405  0102  28D2               	goto	i1l2153
  4406  0103                     i1l2491:
  4407                           
  4408                           ; Switch size 1, requested type "simple"
  4409                           ; Number of cases is 6, Range of values is 65 to 70
  4410                           ; switch strategies available:
  4411                           ; Name         Instructions Cycles
  4412                           ; simple_byte           19    10 (average)
  4413                           ; direct_byte           29    11 (fixed)
  4414                           ; jumptable            263     9 (fixed)
  4415                           ;	Chosen strategy is simple_byte
  4416  0103  0871               	movf	??_ISR,w
  4417  0104  3A41               	xorlw	65	; case 65
  4418  0105  1903               	skipnz
  4419  0106  28C9               	goto	i1l151
  4420  0107  3A03               	xorlw	3	; case 66
  4421  0108  1903               	skipnz
  4422  0109  28C9               	goto	i1l2151
  4423  010A  3A01               	xorlw	1	; case 67
  4424  010B  1903               	skipnz
  4425  010C  28C9               	goto	i1l2151
  4426  010D  3A07               	xorlw	7	; case 68
  4427  010E  1903               	skipnz
  4428  010F  28C9               	goto	i1l2151
  4429  0110  3A01               	xorlw	1	; case 69
  4430  0111  1903               	skipnz
  4431  0112  28C9               	goto	i1l2151
  4432  0113  3A03               	xorlw	3	; case 70
  4433  0114  1903               	skipnz
  4434  0115  28C9               	goto	i1l2151
  4435  0116  28D2               	goto	i1l2153
  4436  0117                     i1l145:	
  4437                           ;machorrobot.c: 151:     }
  4438                           
  4439                           
  4440                           ;machorrobot.c: 152:     if (PIR1bits.ADIF){
  4441  0117  1F0C               	btfss	12,6	;volatile
  4442  0118  291A               	goto	u116_21
  4443  0119  291B               	goto	u116_20
  4444  011A                     u116_21:
  4445  011A  2942               	goto	i1l159
  4446  011B                     u116_20:
  4447  011B  292E               	goto	i1l2189
  4448  011C                     i1l2175:
  4449                           
  4450                           ;machorrobot.c: 156:                 adc1 = ADRESH;
  4451  011C  081E               	movf	30,w	;volatile
  4452  011D  00F1               	movwf	??_ISR
  4453  011E  0871               	movf	??_ISR,w
  4454  011F  00C2               	movwf	_adc1	;volatile
  4455  0120                     i1l2177:
  4456                           
  4457                           ;machorrobot.c: 157:                 ADCON0bits.CHS = 1;
  4458  0120  081F               	movf	31,w	;volatile
  4459  0121  39C3               	andlw	-61
  4460  0122  3804               	iorlw	4
  4461  0123  009F               	movwf	31	;volatile
  4462  0124                     i1l2179:
  4463                           
  4464                           ;machorrobot.c: 158:                 ADCON0bits.GO = 1;
  4465  0124  149F               	bsf	31,1	;volatile
  4466                           
  4467                           ;machorrobot.c: 159:                 break;
  4468  0125  2941               	goto	i1l162
  4469  0126                     i1l2181:
  4470                           
  4471                           ;machorrobot.c: 161:                 adc2 = ADRESH;
  4472  0126  081E               	movf	30,w	;volatile
  4473  0127  00F1               	movwf	??_ISR
  4474  0128  0871               	movf	??_ISR,w
  4475  0129  00C1               	movwf	_adc2	;volatile
  4476  012A                     i1l2183:
  4477                           
  4478                           ;machorrobot.c: 162:                 ADCON0bits.CHS = 0;
  4479  012A  30C3               	movlw	-61
  4480  012B  059F               	andwf	31,f	;volatile
  4481  012C                     i1l2185:
  4482                           
  4483                           ;machorrobot.c: 163:                 ADCON0bits.GO =1;
  4484  012C  149F               	bsf	31,1	;volatile
  4485                           
  4486                           ;machorrobot.c: 164:                 break;
  4487  012D  2941               	goto	i1l162
  4488  012E                     i1l2189:
  4489  012E  0C1F               	rrf	31,w	;volatile
  4490  012F  00F1               	movwf	??_ISR
  4491  0130  0C71               	rrf	??_ISR,w
  4492  0131  390F               	andlw	15
  4493  0132  00F2               	movwf	??_ISR+1
  4494  0133  01F3               	clrf	??_ISR+2
  4495                           
  4496                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4497                           ; Switch size 1, requested type "simple"
  4498                           ; Number of cases is 1, Range of values is 0 to 0
  4499                           ; switch strategies available:
  4500                           ; Name         Instructions Cycles
  4501                           ; simple_byte            4     3 (average)
  4502                           ; direct_byte           11     8 (fixed)
  4503                           ; jumptable            260     6 (fixed)
  4504                           ;	Chosen strategy is simple_byte
  4505  0134  0873               	movf	??_ISR+2,w
  4506  0135  3A00               	xorlw	0	; case 0
  4507  0136  1903               	skipnz
  4508  0137  2939               	goto	i1l2493
  4509  0138  2941               	goto	i1l162
  4510  0139                     i1l2493:
  4511                           
  4512                           ; Switch size 1, requested type "simple"
  4513                           ; Number of cases is 2, Range of values is 0 to 1
  4514                           ; switch strategies available:
  4515                           ; Name         Instructions Cycles
  4516                           ; simple_byte            7     4 (average)
  4517                           ; direct_byte           14     8 (fixed)
  4518                           ; jumptable            260     6 (fixed)
  4519                           ;	Chosen strategy is simple_byte
  4520  0139  0872               	movf	??_ISR+1,w
  4521  013A  3A00               	xorlw	0	; case 0
  4522  013B  1903               	skipnz
  4523  013C  291C               	goto	i1l2175
  4524  013D  3A01               	xorlw	1	; case 1
  4525  013E  1903               	skipnz
  4526  013F  2926               	goto	i1l2181
  4527  0140  2941               	goto	i1l162
  4528  0141                     i1l162:
  4529                           
  4530                           ;machorrobot.c: 167:         PIR1bits.ADIF = 0;
  4531  0141  130C               	bcf	12,6	;volatile
  4532  0142                     i1l159:	
  4533                           ;machorrobot.c: 169:     }
  4534                           
  4535                           
  4536                           ;machorrobot.c: 171:     if(INTCONbits.INTF){
  4537  0142  1C8B               	btfss	11,1	;volatile
  4538  0143  2945               	goto	u117_21
  4539  0144  2946               	goto	u117_20
  4540  0145                     u117_21:
  4541  0145  2951               	goto	i1l165
  4542  0146                     u117_20:
  4543  0146                     i1l2191:
  4544                           
  4545                           ;machorrobot.c: 172:         tiempo = TMR1;
  4546  0146  080F               	movf	15,w	;volatile
  4547  0147  00BD               	movwf	_tiempo+1	;volatile
  4548  0148  080E               	movf	14,w	;volatile
  4549  0149  00BC               	movwf	_tiempo	;volatile
  4550  014A                     i1l2193:
  4551                           
  4552                           ;machorrobot.c: 173:         TMR1 = 0;
  4553  014A  018E               	clrf	14	;volatile
  4554  014B  018F               	clrf	15	;volatile
  4555  014C                     i1l2195:
  4556                           
  4557                           ;machorrobot.c: 174:         INTCONbits.INTF = 0;
  4558  014C  108B               	bcf	11,1	;volatile
  4559  014D                     i1l2197:
  4560                           
  4561                           ;machorrobot.c: 175:         leerSensor = 1;
  4562  014D  3001               	movlw	1
  4563  014E  00F1               	movwf	??_ISR
  4564  014F  0871               	movf	??_ISR,w
  4565  0150  00D0               	movwf	_leerSensor	;volatile
  4566  0151                     i1l165:
  4567  0151  0876               	movf	??_ISR+5,w
  4568  0152  008A               	movwf	10
  4569  0153  0875               	movf	??_ISR+4,w
  4570  0154  0084               	movwf	4
  4571  0155  0E74               	swapf	??_ISR+3,w
  4572  0156  0083               	movwf	3
  4573  0157  0EFE               	swapf	btemp,f
  4574  0158  0E7E               	swapf	btemp,w
  4575  0159  0009               	retfie
  4576  015A                     __end_of_ISR:
  4577                           
  4578                           	psect	intentry
  4579  0004                     __pintentry:	
  4580                           ;incstack = 0
  4581                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4582                           
  4583  0004                     interrupt_function:
  4584  007E                     saved_w	set	btemp
  4585  0004  00FE               	movwf	btemp
  4586  0005  0E03               	swapf	3,w
  4587  0006  00F4               	movwf	??_ISR+3
  4588  0007  0804               	movf	4,w
  4589  0008  00F5               	movwf	??_ISR+4
  4590  0009  080A               	movf	10,w
  4591  000A  00F6               	movwf	??_ISR+5
  4592  000B  120A  118A  2846   	ljmp	_ISR
  4593                           
  4594                           	psect	text21
  4595  0F34                     __ptext21:	
  4596 ;; *************** function i1_cicloDeTrabajo *****************
  4597 ;; Defined at:
  4598 ;;		line 309 in file "machorrobot.c"
  4599 ;; Parameters:    Size  Location     Type
  4600 ;;  valor           1    wreg     unsigned char 
  4601 ;; Auto vars:     Size  Location     Type
  4602 ;;  valor           1    0[COMMON] unsigned char 
  4603 ;; Return value:  Size  Location     Type
  4604 ;;                  1    wreg      unsigned char 
  4605 ;; Registers used:
  4606 ;;		wreg, status,2, status,0
  4607 ;; Tracked objects:
  4608 ;;		On entry : 0/0
  4609 ;;		On exit  : 0/0
  4610 ;;		Unchanged: 0/0
  4611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4612 ;;      Params:         0       0       0       0       0
  4613 ;;      Locals:         1       0       0       0       0
  4614 ;;      Temps:          0       0       0       0       0
  4615 ;;      Totals:         1       0       0       0       0
  4616 ;;Total ram usage:        1 bytes
  4617 ;; Hardware stack levels used:    1
  4618 ;; This function calls:
  4619 ;;		Nothing
  4620 ;; This function is called by:
  4621 ;;		_ISR
  4622 ;; This function uses a non-reentrant model
  4623 ;;
  4624                           
  4625                           
  4626                           ;psect for function i1_cicloDeTrabajo
  4627  0F34                     i1_cicloDeTrabajo:
  4628                           
  4629                           ;incstack = 0
  4630                           ; Regs used in i1_cicloDeTrabajo: [wreg+status,2+status,0]
  4631                           ;i1cicloDeTrabajo@valor stored from wreg
  4632  0F34  00F0               	movwf	i1cicloDeTrabajo@valor
  4633  0F35                     i1l2115:
  4634                           
  4635                           ;machorrobot.c: 310:     return valor+31;
  4636  0F35  0870               	movf	i1cicloDeTrabajo@valor,w
  4637  0F36  3E1F               	addlw	31
  4638  0F37                     i1l182:
  4639  0F37  0008               	return
  4640  0F38                     __end_ofi1_cicloDeTrabajo:
  4641  007E                     btemp	set	126	;btemp
  4642  007E                     wtemp0	set	126
  4643                           
  4644                           	psect	config
  4645                           
  4646                           ;Config register CONFIG1 @ 0x2007
  4647                           ;	Oscillator Selection bits
  4648                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  4649                           ;	Watchdog Timer Enable bit
  4650                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  4651                           ;	Power-up Timer Enable bit
  4652                           ;	PWRTE = OFF, PWRT disabled
  4653                           ;	RE3/MCLR pin function select bit
  4654                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  4655                           ;	Code Protection bit
  4656                           ;	CP = OFF, Program memory code protection is disabled
  4657                           ;	Data Code Protection bit
  4658                           ;	CPD = OFF, Data memory code protection is disabled
  4659                           ;	Brown Out Reset Selection bits
  4660                           ;	BOREN = OFF, BOR disabled
  4661                           ;	Internal External Switchover bit
  4662                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  4663                           ;	Fail-Safe Clock Monitor Enabled bit
  4664                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  4665                           ;	Low Voltage Programming Enable bit
  4666                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  4667                           ;	In-Circuit Debugger Mode bit
  4668                           ;	DEBUG = 0x1, unprogrammed default
  4669  2007                     	org	8199
  4670  2007  20D4               	dw	8404
  4671                           
  4672                           ;Config register CONFIG2 @ 0x2008
  4673                           ;	Brown-out Reset Selection bit
  4674                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  4675                           ;	Flash Program Memory Self Write Enable bits
  4676                           ;	WRT = OFF, Write protection off
  4677  2008                     	org	8200
  4678  2008  3FFF               	dw	16383

Data Sizes:
    Strings     54
    Constant    0
    Data        5
    BSS         70
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      14
    BANK0            80     28      49
    BANK1            80      0      50
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    utoa@buf	PTR unsigned char  size(1) Largest target is 6
		 -> debug(BANK0[6]), 

    sp__utoa	PTR unsigned char  size(1) Largest target is 6
		 -> debug(BANK0[6]), 

    itoa@buf	PTR unsigned char  size(1) Largest target is 6
		 -> debug(BANK0[6]), 

    itoa@cp	PTR unsigned char  size(1) Largest target is 6
		 -> debug(BANK0[6]), 

    atoi@s	PTR const unsigned char  size(1) Largest target is 4
		 -> numero(BANK0[4]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 6
		 -> debug(BANK0[6]), 

    SendString@string	PTR const unsigned char  size(2) Largest target is 23
		 -> STR_8(CODE[4]), STR_7(CODE[4]), STR_6(CODE[3]), STR_5(CODE[23]), 
		 -> STR_4(CODE[4]), STR_3(CODE[4]), STR_2(CODE[3]), debug(BANK0[6]), 
		 -> STR_1(CODE[23]), numero(BANK0[4]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->i1_cicloDeTrabajo

Critical Paths under _main in BANK0

    _main->_readPosition
    _main->_savePosition
    _savePosition->_itoa
    _readPosition->_itoa
    _itoa->_utoa
    _utoa->___lwdiv
    _moonwalk->_moveCCPservo
    _ejecutarComando->_atoi
    _atoi->___wmul
    _SendString->_SendChar
    _aletear->_moveCCPservo
    _moveCCPservo->_cicloDeTrabajo

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   18048
                                             27 BANK0      1     1      0
                            _aletear
                    _ejecutarComando
                           _initUart
                           _moonwalk
                       _readPosition
                       _savePosition
 ---------------------------------------------------------------------------------
 (1) _savePosition                                         3     3      0    6076
                                             24 BANK0      3     3      0
                           _SendChar
                         _SendString
                               _itoa
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _writeEEPROM                                          2     1      1     272
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (1) _readPosition                                         3     3      0    5826
                                             24 BANK0      3     3      0
                           _SendChar
                         _SendString
                               _itoa
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _readEEPROM                                           1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _itoa                                                 7     3      4    2907
                                             17 BANK0      7     3      4
                               _utoa
 ---------------------------------------------------------------------------------
 (3) _utoa                                                 9     5      4    1264
                                              8 BANK0      9     5      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     311
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     466
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _moonwalk                                             6     6      0     991
                                              6 BANK0      6     6      0
                       _moveCCPservo
 ---------------------------------------------------------------------------------
 (1) _initUart                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ejecutarComando                                      4     4      0    4188
                                             14 BANK0      4     4      0
                           _SendChar
                         _SendString
                               _atoi
                       _moveCCPservo
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 8     6      2     573
                                              6 BANK0      8     6      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     244
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _SendString                                           8     5      3    2741
                                              1 BANK0      8     5      3
                           _SendChar
 ---------------------------------------------------------------------------------
 (3) _SendChar                                             1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _aletear                                              5     5      0     967
                                              6 BANK0      5     5      0
                       _moveCCPservo
 ---------------------------------------------------------------------------------
 (2) _moveCCPservo                                         5     4      1     719
                                              1 BANK0      5     4      1
                     _cicloDeTrabajo
 ---------------------------------------------------------------------------------
 (3) _cicloDeTrabajo                                       1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                  7     7      0     111
                                              1 COMMON     7     7      0
                   i1_cicloDeTrabajo
 ---------------------------------------------------------------------------------
 (6) i1_cicloDeTrabajo                                     1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _aletear
     _moveCCPservo
       _cicloDeTrabajo
   _ejecutarComando
     _SendChar
     _SendString
       _SendChar
     _atoi
       ___wmul
       _isdigit
     _moveCCPservo
       _cicloDeTrabajo
   _initUart
   _moonwalk
     _moveCCPservo
       _cicloDeTrabajo
   _readPosition
     _SendChar
     _SendString
       _SendChar
     _itoa
       _utoa
         ___lwdiv
         ___lwmod
     _readEEPROM
   _savePosition
     _SendChar
     _SendString
       _SendChar
     _itoa
       _utoa
         ___lwdiv
         ___lwmod
     _writeEEPROM

 _ISR (ROOT)
   i1_cicloDeTrabajo

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      32       7       62.5%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     1C      31       5       61.3%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      8       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      71      12        0.0%
ABS                  0      0      71       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Wed Jun 02 10:42:58 2021

                        pc 0002                         fsr 0004        ___wmul@multiplicand 0022  
            _contadorDatos 007C                        l220 0F4D                        l223 0F57  
                      l231 0716                        l217 0F78                        l209 04D7  
                      l242 05DB                        l251 0F66                        l261 0368  
                      l245 07F2                        l182 0F41                        l248 07FF  
                      l256 0265                        l347 0FE7                        l189 0FB2  
                      l349 0FFF                        l198 06BF                        l810 055A  
                      l619 07A2                        l629 07DE                        l821 0FD8  
                      l815 0F8C                        l827 0636                        l829 064D  
                      _PR2 0092                        u700 079E                        _ISR 0046  
                      u701 079D                        u710 07AB                        u711 07AA  
                      u640 0767                        u641 0766                        u810 0FFB  
                      u730 07BD                        u811 0FFA                        u731 07BC  
                      u900 0716                        u820 0F83                        u660 0779  
                      u740 07C7                        u901 0715                        u805 0FEF  
                      u821 0F82                        u661 0778                        u741 07C6  
                      u725 07AF                        u830 0F89                        u910 04E9  
                      u831 0F88                        u911 04E8                        u655 076B  
                      u920 04F1                        u680 078A                        u760 07DA  
                      u840 0600                        u921 04F0                        u681 0789  
                      u761 07D9                        u745 07C3                        u841 05FF  
                      u770 0F53                        u930 04FC                        u850 0632  
                      u771 0F52                        u931 04FB                        u675 077A  
                      u755 07CE                        u851 0631                        u780 0FE1  
                      u940 050D                        u860 0649                        u781 0FE0  
                      u941 050C                        u685 0786                        u861 0648  
                      u870 06D1                        u950 0543                        u951 0542  
                      u695 0792                        u880 06F8                        u960 054A  
                      u881 06F7                        u961 0549                        u890 0704  
                      u970 07F6                        u795 0FE8                        u971 07F5  
                      u980 0FBA                        u885 06F4                        u981 0FB9  
                      u990 01E1                        u991 01E0                        fsr0 0004  
                      indf 0000                       ?_ISR 0070                       l2001 0659  
                     l2011 067B                       l2003 065D                       l2021 0696  
                     l2013 0686                       l2005 0663                       l2101 05AA  
                     l2023 06AA                       l2015 068C                       l2103 05B5  
                     l2031 0445                       l2025 06B5                       l2017 0692  
                     l2009 0667                       l2105 05BA                       l2033 0459  
                     l2027 06B9                       l2043 0467                       l2035 045F  
                     l2109 05BF                       l2053 0483                       l2045 0475  
                     l2037 0463                       l2029 0442                       l2301 03C4  
                     l2221 0371                       l2063 04A1                       l2055 0491  
                     l2047 0479                       l2311 03D6                       l2303 03C7  
                     l2231 0377                       l2223 0372                       l2081 0567  
                     l2073 04BF                       l2065 04AF                       l2057 0497  
                     l2049 047F                       l2321 03E6                       l2313 03D7  
                     l2305 03C8                       l2241 0382                       l2233 0378  
                     l2225 0373                       l2217 0369                       l2091 0591  
                     l2083 0574                       l2075 04CD                       l2067 04B5  
                     l2059 049D                       l2331 03FE                       l2323 03EA  
                     l2315 03D8                       l2307 03CE                       l2251 038E  
                     l2243 0386                       l2235 037B                       l2227 0374  
                     l2219 036D                       l2093 0595                       l2085 0581  
                     l2077 04D1                       l2069 04BB                       l1701 0775  
                     l2341 041A                       l2333 0406                       l2325 03EF  
                     l2317 03DE                       l2309 03D2                       l2261 0398  
                     l2253 0390                       l2245 0387                       l2237 037C  
                     l2229 0376                       l2095 0597                       l2087 0587  
                     l2079 055B                       l1711 0798                       l1703 0779  
                     l2351 0437                       l2343 041D                       l2335 040B  
                     l2327 03F5                       l2319 03E2                       l2271 03A0  
                     l2263 0399                       l2255 0392                       l2247 0388  
                     l2239 037E                       l2097 059C                       l2089 058D  
                     l1705 078A                       l1713 079E                       l1721 07AE  
                     l2353 0439                       l2337 0412                       l2345 041E  
                     l2329 03F9                       l2281 03B3                       l2273 03A3  
                     l2265 039D                       l2257 0393                       l2249 038C  
                     l1811 0FA2                       l1803 0F90                       l2099 05A1  
                     l1707 0790                       l1731 07CD                       l1723 07B5  
                     l2347 042B                       l2339 0413                       l2291 03BD  
                     l2283 03B5                       l2275 03A8                       l2267 039E  
                     l2259 0397                       l1805 0F9C                       l1821 06E3  
                     l1709 0791                       l1733 07D4                       l1725 07B9  
                     l1717 07A3                       l2349 0430                       l2293 03BE  
                     l2285 03B8                       l2277 03AB                       l2269 039F  
                     l1807 0F9F                       l1743 0F4D                       l1823 06EB  
                     l1751 0FE1                       l1831 04E0                       l1903 0F67  
                     l1727 07BD                       l1719 07AB                       l1735 07DA  
                     l1911 015A                       l2295 03C0                       l2287 03BB  
                     l2279 03AD                       l1745 0F53                       l1825 06F8  
                     l1817 06C0                       l1753 0FEE                       l1761 0F7C  
                     l1841 0505                       l1833 04E9                       l1905 0F72  
                     l1729 07C7                       l1921 018C                       l1913 0169  
                     l2297 03C1                       l2289 03BC                       l1739 0F3F  
                     l1819 06C7                       l1755 0FF5                       l1747 0FD9  
                     l1763 0F7D                       l1851 0543                       l1843 050D  
                     l1835 04F1                       l1827 04DB                       l1907 0F76  
                     l1691 075D                       l1931 01DB                       l1923 019B  
                     l2299 03C2                       l1757 0FFB                       l1749 0FDD  
                     l1765 0F83                       l1853 054A                       l1845 0512  
                     l1837 04F4                       l1829 04DC                       l2485 05C7  
                     l1909 0F77                       l1693 0761                       l1781 0600  
                     l1773 05DF                       l1861 07E2                       l1941 021C  
                     l1933 01E1                       l1925 01C0                       l2487 0FAA  
                     l1767 0F89                       l1839 04FC                       l1695 0767  
                     l1791 0632                       l1783 0604                       l1775 05E3  
                     l1951 0266                       l1871 07F1                       l1863 07E6  
                     l1943 0222                       l1935 01EB                       l1927 01CF  
                     l1919 016C                       l1769 0F8B                       l1857 0556  
                     l1849 0537                       l1697 076A                       l1793 063A  
                     l1785 0606                       l1777 05F6                       l1881 0F5B  
                     l1961 0297                       l1953 0275                       l1873 07F6  
                     l1865 07E7                       l1945 022E                       l1937 01FA  
                     l1929 01D5                       l1699 0771                       l1795 0641  
                     l1787 0619                       l1779 05FA                       l1891 0FB6  
                     l1883 0F5F                       l1971 02E6                       l1963 02A6  
                     l1875 07FC                       l1867 07ED                       l1947 023D  
                     l1939 020D                       l1797 0643                       l1789 062C  
                     l1893 0FBA                       l1885 0F62                       l1981 0324  
                     l1973 02EC                       l1965 02CB                       l1877 07FD  
                     l1869 07F0                       l1949 0250                       l1991 064E  
                     l1799 0649                       l1895 0FC1                       l1983 032A  
                     l1975 02F5                       l1967 02DA                       l1959 0278  
                     l1879 07FE                       l1993 0651                       l1897 0FC5  
                     l1889 0FB6                       l1985 0333                       l1977 0302  
                     l1969 02E0                       l1899 0FCA                       l1987 0340  
                     l1979 0315                       l1989 0353                       l1999 0652  
                     STR_1 073E                       STR_2 0756                       STR_3 0755  
                     STR_4 0759                       STR_5 0727                       STR_6 0756  
                     STR_7 0755                       STR_8 0759                       u1000 02EC  
                     _T0IF 005A                       u1001 02EB                       u1010 0663  
                     u1011 0662                       u1020 0692                       u1021 0691  
                     u1030 06BF                       u1031 06BE                       u1040 047F  
                     u1200 03F5                       u1041 047E                       u1201 03F4  
                     u1050 049D                       u1210 03F9                       u1051 049C  
                     u1211 03F8                       u1060 04BB                       u1220 0406  
                     u1061 04BA                       u1221 0405                       u1070 04D7  
                     u1230 0412                       u1071 04D6                       u1231 0411  
                     u1080 0571                       u1240 042B                       u1081 056D  
                     u1241 042A                       u1250 0437                       u1307 04C9  
                     u1251 0436                       u1180 03E6                       u1317 0681  
                     u1245 0427                       u1181 03E5                       u1094 0574  
                     u1190 03EA                       u1327 06B0                       u1191 03E9  
                     u1267 0417                       u1277 0471                       u1287 048D  
                     u1297 04AB                       _TMR0 0001                       _TMR1 000E  
                     _adc1 0042                       _adc2 0041                       _atoi 04D8  
                     _cont 0043                       _main 0369                       _itoa 0FB3  
                     btemp 007E                       _utoa 05DC                       start 000E  
      readEEPROM@direccion 0020             _cicloDeTrabajo 0F3C                _writeEEPROM 07DF  
                    ??_ISR 0071                      ?_atoi 0026                      ?_main 0070  
                    ?_itoa 0031                      _EEADR 010D                      _ANSEL 0188  
                    ?_utoa 0028            __end_of___lwdiv 07A3                      i1l141 005C  
                    i1l142 006E                      i1l151 00C9                      i1l143 0080  
                    i1l144 0092                      i1l145 0117                      i1l162 0141  
                    i1l139 004B                      i1l165 0151                      i1l182 0F37  
                    i1l159 0142            __end_of___lwmod 07DF                      _RCREG 001A  
                    _SPBRG 0099                      _PORTA 0005                      _TRISA 0085  
                    _TRISB 0086                      _TRISC 0087                      _TRISD 0088  
                    _TXREG 0019            __end_of_aletear 06C0      i1cicloDeTrabajo@valor 0070  
                    _debug 0044            __end_of_isdigit 0F8D                      atoi@a 002B  
                    atoi@s 002D                      pclath 000A                      utoa@c 002F  
                    utoa@v 002D                      status 0003                      wtemp0 007E  
   __end_of_cicloDeTrabajo 0F42            __initialization 0011               __end_of_atoi 055B  
             __end_of_main 0442               __end_of_itoa 0FD9               __end_of_utoa 064E  
         __end_of_SendChar 0F58                     ??_atoi 0028                     ??_main 003B  
                   ??_itoa 0035                     ??_utoa 002C            _ejecutarComando 055B  
__size_ofi1_cicloDeTrabajo 0004                     ISR@aux 0077                     _ADCON1 009F  
                   _ADRESH 001E                     _EEADRH 010F                     _EEDATA 010C  
                   _CCPR1L 0015                     _CCPR2L 001B                     _EECON2 018D  
                   _ANSELH 0189                     u110_20 004A                     u110_21 0049  
                   u111_20 00BF                     u111_21 00BE                     i1l2115 0F35  
                   i1l2131 0095                     i1l2123 004E                     i1l2141 00B8  
                   i1l2133 0096                     i1l2125 0060                     i1l2151 00C9  
                   i1l2127 0072                     i1l2143 00B9                     i1l2119 0046  
                   u112_20 00C8                     i1l2161 00EB                     i1l2153 00D2  
                   u112_21 00C7                     i1l2145 00BF                     i1l2129 0084  
                   i1l2137 009B                     i1l2163 00F0                     i1l2155 00D7  
                   i1l2171 00FB                     i1l2147 00C3                     i1l2139 00B4  
                   i1l2181 0126                     i1l2165 00F5                     i1l2157 00DD  
                   i1l2191 0146                     i1l2183 012A                     i1l2175 011C  
                   i1l2167 00F9                     i1l2159 00E3                     u113_20 00D7  
                   i1l2193 014A                     i1l2185 012C                     i1l2177 0120  
                   u113_21 00D6                     i1l2195 014C                     i1l2179 0124  
                   i1l2197 014D                     i1l2189 012E                     u114_20 00DD  
                   u114_21 00DC                     i1l2491 0103                     i1l2493 0139  
                   u115_20 00E3                     u115_21 00E2                     i1l2489 00A3  
                   u116_20 011B                 _SendString 06C0                     u116_21 011A  
                   u117_20 0146                     u117_21 0145              ?_readPosition 0070  
          ?_cicloDeTrabajo 0070           SendString@string 0021                     ___wmul 0FD9  
                ??___lwdiv 0024                  ??___lwmod 0024           __end_of_initUart 0F79  
                ??_aletear 0026                     _tiempo 003C                     _numero 004A  
             __pdataCOMMON 0078                  ??_isdigit 0020           __end_of_moonwalk 04D8  
                   saved_w 007E             ??_readPosition 0038    __end_of__initialization 0042  
          writeEEPROM@data 0021             __pcstackCOMMON 0070               __pidataBANK0 0003  
            ?_moveCCPservo 0021    __end_of_ejecutarComando 05DC                SendString@i 0027  
           _OPTION_REGbits 0081                 __pbssBANK0 003C                 __pbssBANK1 00A0  
              ?_SendString 0021           SendChar@caracter 0020                  ?_SendChar 0070  
            ?_savePosition 0070                 __pmaintext 0369               ?_writeEEPROM 0020  
           ??_moveCCPservo 0022                    ?___wmul 0020                 _hayComando 003F  
               __pintentry 0004           i1_cicloDeTrabajo 0F34       writeEEPROM@direccion 0020  
               __stringtab 0717                 _leerSensor 0050                  ?_initUart 0070  
               _readEEPROM 0F58                 ??_SendChar 0020             ??_savePosition 0038  
                ?_moonwalk 0070            __size_of___wmul 0027                    ___lwdiv 075D  
                  ___lwmod 07A3           ?_ejecutarComando 0070       __end_of_readPosition 0369  
                  _aletear 064E        __size_of_SendString 0057                    _angulos 0078  
                  __ptext1 015A                    __ptext2 07DF                    __ptext3 0266  
                  __ptext4 0F58                    __ptext5 0FB3                    __ptext6 05DC  
                  __ptext7 07A3                    __ptext8 075D                    __ptext9 0442  
                  _comando 0040               __size_of_ISR 0114                  _T1CONbits 0010  
                _T2CONbits 0012                    _isdigit 0F79                    clrloop0 0F43  
     end_of_initialization 0042           ??_cicloDeTrabajo 0020                    itoa@buf 0037  
               ??_initUart 0020                    itoa@val 0031              savePosition@i 003A  
               ??_moonwalk 0026                  _RCSTAbits 0018                    utoa@buf 0030  
                  utoa@val 0028                  _PORTAbits 0005                  _PORTBbits 0006  
                _PORTCbits 0007                  _PORTDbits 0008                  _TRISAbits 0085  
                _TRISBbits 0086       __end_of_moveCCPservo 0FB3                _CCP1CONbits 0017  
              ?_readEEPROM 0070                _CCP2CONbits 001D                  _TXSTAbits 0098  
     __size_of_writeEEPROM 0021             __end_of___wmul 1000              __pidataCOMMON 0F38  
           _ejecutaComando 003E        start_initialization 0011       __end_of_savePosition 0266  
              __end_of_ISR 015A               ??_SendString 0024            SendString@largo 0023  
 __end_ofi1_cicloDeTrabajo 0F38          __size_of_SendChar 000E      __size_of_readPosition 0103  
                 ??___wmul 0024                __pdataBANK0 0050         __end_of_SendString 0717  
      __size_of_readEEPROM 000F                __pbssCOMMON 007C                  ___latbits 0002  
            __pcstackBANK0 0020        cicloDeTrabajo@valor 0020               _isdigit$1211 0020  
             _readPosition 0266                  __pnvBANK0 004E          __size_of_initUart 0012  
         ___lwdiv@dividend 0022                   ?___lwdiv 0020          __size_of_moonwalk 0096  
                 ?___lwmod 0020                   ?_aletear 0070                  __pstrings 0717  
    __size_of_moveCCPservo 0026                   ?_isdigit 0070           ___lwdiv@quotient 0025  
        interrupt_function 0004             ___wmul@product 0024                  clear_ram0 0F42  
                 _PIE1bits 008C                   _PIR1bits 000C              moonwalk@i_736 0029  
            moonwalk@i_737 002A              moonwalk@i_738 002B               _moveCCPservo 0F8D  
    __size_of_savePosition 010C               aletear@i_731 0029               aletear@i_733 002A  
               _ADCON0bits 001F                __stringbase 0726          ___wmul@multiplier 0020  
        moveCCPservo@angle 0024          moveCCPservo@valor 0025          moveCCPservo@servo 0021  
 __size_of_ejecutarComando 0081               ??_readEEPROM 0020                 _EECON1bits 018C  
                 _SendChar 0F4A                _lecturaUart 00A0               _savePosition 015A  
         __size_of___lwdiv 0046           __size_of___lwmod 003C         __end_of__stringtab 0727  
         __size_of_aletear 0072         __end_of_readEEPROM 0F67           __size_of_isdigit 0014  
            _portAanterior 004E            ___lwdiv@divisor 0020            ___lwdiv@counter 0027  
                 __ptext10 0F67                   __ptext11 055B                   __ptext20 0046  
                 __ptext12 04D8                   __ptext21 0F34                   __ptext13 0F79  
                 __ptext14 0FD9                   __ptext15 06C0                   __ptext16 0F4A  
                 __ptext17 064E                   __ptext18 0F8D                   __ptext19 0F3C  
                 _contador 007D                   _initUart 0F67              __size_of_atoi 0083  
            __size_of_main 00D9              __size_of_itoa 0026              __size_of_utoa 0072  
                moonwalk@i 0028                   aletear@i 0028              ??_writeEEPROM 0021  
                 _moonwalk 0442          ?i1_cicloDeTrabajo 0070    __size_of_cicloDeTrabajo 0006  
            readPosition@i 003A                   atoi@sign 002A         ??i1_cicloDeTrabajo 0070  
               _INTCONbits 000B                   itoa@base 0033                   isdigit@c 0021  
                 intlevel1 0000          ??_ejecutarComando 002E           ___lwmod@dividend 0022  
                stringcode 0721        __end_of_writeEEPROM 0800                   utoa@base 002A  
              _portAactual 004F            ___lwmod@divisor 0020            ___lwmod@counter 0025  
                 stringdir 0721                   stringtab 0717     ejecutarComando@numeros 0030  
